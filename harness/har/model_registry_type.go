/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"fmt"
)

// RegistryType refers to type of registry i.e virtual or upstream
type RegistryType string

// List of RegistryType
const (
	VIRTUAL RegistryType = "VIRTUAL"
	UPSTREAM RegistryType = "UPSTREAM"
)

// All allowed values of RegistryType enum
var AllowedRegistryTypeEnumValues = []RegistryType{
	"VIRTUAL",
	"UPSTREAM",
}

func (v *RegistryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RegistryType(value)
	for _, existing := range AllowedRegistryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RegistryType", value)
}

// NewRegistryTypeFromValue returns a pointer to a valid RegistryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegistryTypeFromValue(v string) (*RegistryType, error) {
	ev := RegistryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RegistryType: valid values are %v", v, AllowedRegistryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegistryType) IsValid() bool {
	for _, existing := range AllowedRegistryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RegistryType value
func (v RegistryType) Ptr() *RegistryType {
	return &v
}

type NullableRegistryType struct {
	value *RegistryType
	isSet bool
}

func (v NullableRegistryType) Get() *RegistryType {
	return v.value
}

func (v *NullableRegistryType) Set(val *RegistryType) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistryType) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistryType(val *RegistryType) *NullableRegistryType {
	return &NullableRegistryType{value: val, isSet: true}
}

func (v NullableRegistryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

