/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"fmt"
)

// ClientSetupSection - Client Setup Section
type ClientSetupSection struct {
	ClientSetupStepConfig *ClientSetupStepConfig
	TabSetupStepConfig *TabSetupStepConfig
}

// ClientSetupStepConfigAsClientSetupSection is a convenience function that returns ClientSetupStepConfig wrapped in ClientSetupSection
func ClientSetupStepConfigAsClientSetupSection(v *ClientSetupStepConfig) ClientSetupSection {
	return ClientSetupSection{
		ClientSetupStepConfig: v,
	}
}

// TabSetupStepConfigAsClientSetupSection is a convenience function that returns TabSetupStepConfig wrapped in ClientSetupSection
func TabSetupStepConfigAsClientSetupSection(v *TabSetupStepConfig) ClientSetupSection {
	return ClientSetupSection{
		TabSetupStepConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ClientSetupSection) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'INLINE'
	if jsonDict["type"] == "INLINE" {
		// try to unmarshal JSON data into ClientSetupStepConfig
		err = json.Unmarshal(data, &dst.ClientSetupStepConfig)
		if err == nil {
			return nil // data stored in dst.ClientSetupStepConfig, return on the first match
		} else {
			dst.ClientSetupStepConfig = nil
			return fmt.Errorf("failed to unmarshal ClientSetupSection as ClientSetupStepConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TABS'
	if jsonDict["type"] == "TABS" {
		// try to unmarshal JSON data into TabSetupStepConfig
		err = json.Unmarshal(data, &dst.TabSetupStepConfig)
		if err == nil {
			return nil // data stored in dst.TabSetupStepConfig, return on the first match
		} else {
			dst.TabSetupStepConfig = nil
			return fmt.Errorf("failed to unmarshal ClientSetupSection as TabSetupStepConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ClientSetupStepConfig'
	if jsonDict["type"] == "ClientSetupStepConfig" {
		// try to unmarshal JSON data into ClientSetupStepConfig
		err = json.Unmarshal(data, &dst.ClientSetupStepConfig)
		if err == nil {
			return nil // data stored in dst.ClientSetupStepConfig, return on the first match
		} else {
			dst.ClientSetupStepConfig = nil
			return fmt.Errorf("failed to unmarshal ClientSetupSection as ClientSetupStepConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TabSetupStepConfig'
	if jsonDict["type"] == "TabSetupStepConfig" {
		// try to unmarshal JSON data into TabSetupStepConfig
		err = json.Unmarshal(data, &dst.TabSetupStepConfig)
		if err == nil {
			return nil // data stored in dst.TabSetupStepConfig, return on the first match
		} else {
			dst.TabSetupStepConfig = nil
			return fmt.Errorf("failed to unmarshal ClientSetupSection as TabSetupStepConfig: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ClientSetupSection) MarshalJSON() ([]byte, error) {
	if src.ClientSetupStepConfig != nil {
		return json.Marshal(&src.ClientSetupStepConfig)
	}

	if src.TabSetupStepConfig != nil {
		return json.Marshal(&src.TabSetupStepConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ClientSetupSection) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ClientSetupStepConfig != nil {
		return obj.ClientSetupStepConfig
	}

	if obj.TabSetupStepConfig != nil {
		return obj.TabSetupStepConfig
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ClientSetupSection) GetActualInstanceValue() (interface{}) {
	if obj.ClientSetupStepConfig != nil {
		return *obj.ClientSetupStepConfig
	}

	if obj.TabSetupStepConfig != nil {
		return *obj.TabSetupStepConfig
	}

	// all schemas are nil
	return nil
}

type NullableClientSetupSection struct {
	value *ClientSetupSection
	isSet bool
}

func (v NullableClientSetupSection) Get() *ClientSetupSection {
	return v.value
}

func (v *NullableClientSetupSection) Set(val *ClientSetupSection) {
	v.value = val
	v.isSet = true
}

func (v NullableClientSetupSection) IsSet() bool {
	return v.isSet
}

func (v *NullableClientSetupSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientSetupSection(val *ClientSetupSection) *NullableClientSetupSection {
	return &NullableClientSetupSection{value: val, isSet: true}
}

func (v NullableClientSetupSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientSetupSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


