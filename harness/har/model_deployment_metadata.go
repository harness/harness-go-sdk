/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeploymentMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentMetadata{}

// DeploymentMetadata struct for DeploymentMetadata
type DeploymentMetadata struct {
	NonProdEnvCount int32 `json:"nonProdEnvCount"`
	ProdEnvCount int32 `json:"prodEnvCount"`
}

type _DeploymentMetadata DeploymentMetadata

// NewDeploymentMetadata instantiates a new DeploymentMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentMetadata(nonProdEnvCount int32, prodEnvCount int32) *DeploymentMetadata {
	this := DeploymentMetadata{}
	this.NonProdEnvCount = nonProdEnvCount
	this.ProdEnvCount = prodEnvCount
	return &this
}

// NewDeploymentMetadataWithDefaults instantiates a new DeploymentMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentMetadataWithDefaults() *DeploymentMetadata {
	this := DeploymentMetadata{}
	return &this
}

// GetNonProdEnvCount returns the NonProdEnvCount field value
func (o *DeploymentMetadata) GetNonProdEnvCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NonProdEnvCount
}

// GetNonProdEnvCountOk returns a tuple with the NonProdEnvCount field value
// and a boolean to check if the value has been set.
func (o *DeploymentMetadata) GetNonProdEnvCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NonProdEnvCount, true
}

// SetNonProdEnvCount sets field value
func (o *DeploymentMetadata) SetNonProdEnvCount(v int32) {
	o.NonProdEnvCount = v
}

// GetProdEnvCount returns the ProdEnvCount field value
func (o *DeploymentMetadata) GetProdEnvCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProdEnvCount
}

// GetProdEnvCountOk returns a tuple with the ProdEnvCount field value
// and a boolean to check if the value has been set.
func (o *DeploymentMetadata) GetProdEnvCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProdEnvCount, true
}

// SetProdEnvCount sets field value
func (o *DeploymentMetadata) SetProdEnvCount(v int32) {
	o.ProdEnvCount = v
}

func (o DeploymentMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nonProdEnvCount"] = o.NonProdEnvCount
	toSerialize["prodEnvCount"] = o.ProdEnvCount
	return toSerialize, nil
}

func (o *DeploymentMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nonProdEnvCount",
		"prodEnvCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentMetadata := _DeploymentMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeploymentMetadata)

	if err != nil {
		return err
	}

	*o = DeploymentMetadata(varDeploymentMetadata)

	return err
}

type NullableDeploymentMetadata struct {
	value *DeploymentMetadata
	isSet bool
}

func (v NullableDeploymentMetadata) Get() *DeploymentMetadata {
	return v.value
}

func (v *NullableDeploymentMetadata) Set(val *DeploymentMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentMetadata(val *DeploymentMetadata) *NullableDeploymentMetadata {
	return &NullableDeploymentMetadata{value: val, isSet: true}
}

func (v NullableDeploymentMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


