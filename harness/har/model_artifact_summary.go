/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArtifactSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtifactSummary{}

// ArtifactSummary Harness Artifact Summary
type ArtifactSummary struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	DownloadsCount *int64 `json:"downloadsCount,omitempty"`
	ImageName string `json:"imageName"`
	Labels []string `json:"labels,omitempty"`
	ModifiedAt *string `json:"modifiedAt,omitempty"`
	PackageType PackageType `json:"packageType"`
}

type _ArtifactSummary ArtifactSummary

// NewArtifactSummary instantiates a new ArtifactSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactSummary(imageName string, packageType PackageType) *ArtifactSummary {
	this := ArtifactSummary{}
	this.ImageName = imageName
	this.PackageType = packageType
	return &this
}

// NewArtifactSummaryWithDefaults instantiates a new ArtifactSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactSummaryWithDefaults() *ArtifactSummary {
	this := ArtifactSummary{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ArtifactSummary) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactSummary) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ArtifactSummary) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ArtifactSummary) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDownloadsCount returns the DownloadsCount field value if set, zero value otherwise.
func (o *ArtifactSummary) GetDownloadsCount() int64 {
	if o == nil || IsNil(o.DownloadsCount) {
		var ret int64
		return ret
	}
	return *o.DownloadsCount
}

// GetDownloadsCountOk returns a tuple with the DownloadsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactSummary) GetDownloadsCountOk() (*int64, bool) {
	if o == nil || IsNil(o.DownloadsCount) {
		return nil, false
	}
	return o.DownloadsCount, true
}

// HasDownloadsCount returns a boolean if a field has been set.
func (o *ArtifactSummary) HasDownloadsCount() bool {
	if o != nil && !IsNil(o.DownloadsCount) {
		return true
	}

	return false
}

// SetDownloadsCount gets a reference to the given int64 and assigns it to the DownloadsCount field.
func (o *ArtifactSummary) SetDownloadsCount(v int64) {
	o.DownloadsCount = &v
}

// GetImageName returns the ImageName field value
func (o *ArtifactSummary) GetImageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value
// and a boolean to check if the value has been set.
func (o *ArtifactSummary) GetImageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageName, true
}

// SetImageName sets field value
func (o *ArtifactSummary) SetImageName(v string) {
	o.ImageName = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ArtifactSummary) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactSummary) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ArtifactSummary) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *ArtifactSummary) SetLabels(v []string) {
	o.Labels = v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *ArtifactSummary) GetModifiedAt() string {
	if o == nil || IsNil(o.ModifiedAt) {
		var ret string
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactSummary) GetModifiedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *ArtifactSummary) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given string and assigns it to the ModifiedAt field.
func (o *ArtifactSummary) SetModifiedAt(v string) {
	o.ModifiedAt = &v
}

// GetPackageType returns the PackageType field value
func (o *ArtifactSummary) GetPackageType() PackageType {
	if o == nil {
		var ret PackageType
		return ret
	}

	return o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value
// and a boolean to check if the value has been set.
func (o *ArtifactSummary) GetPackageTypeOk() (*PackageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageType, true
}

// SetPackageType sets field value
func (o *ArtifactSummary) SetPackageType(v PackageType) {
	o.PackageType = v
}

func (o ArtifactSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.DownloadsCount) {
		toSerialize["downloadsCount"] = o.DownloadsCount
	}
	toSerialize["imageName"] = o.ImageName
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	toSerialize["packageType"] = o.PackageType
	return toSerialize, nil
}

func (o *ArtifactSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imageName",
		"packageType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArtifactSummary := _ArtifactSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArtifactSummary)

	if err != nil {
		return err
	}

	*o = ArtifactSummary(varArtifactSummary)

	return err
}

type NullableArtifactSummary struct {
	value *ArtifactSummary
	isSet bool
}

func (v NullableArtifactSummary) Get() *ArtifactSummary {
	return v.value
}

func (v *NullableArtifactSummary) Set(val *ArtifactSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactSummary(val *ArtifactSummary) *NullableArtifactSummary {
	return &NullableArtifactSummary{value: val, isSet: true}
}

func (v NullableArtifactSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


