/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
)

// checks if the CleanupPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CleanupPolicy{}

// CleanupPolicy Cleanup Policy for Harness Artifact Registries
type CleanupPolicy struct {
	ExpireDays *int32 `json:"expireDays,omitempty"`
	Name *string `json:"name,omitempty"`
	PackagePrefix []string `json:"packagePrefix,omitempty"`
	VersionPrefix []string `json:"versionPrefix,omitempty"`
}

// NewCleanupPolicy instantiates a new CleanupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCleanupPolicy() *CleanupPolicy {
	this := CleanupPolicy{}
	return &this
}

// NewCleanupPolicyWithDefaults instantiates a new CleanupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCleanupPolicyWithDefaults() *CleanupPolicy {
	this := CleanupPolicy{}
	return &this
}

// GetExpireDays returns the ExpireDays field value if set, zero value otherwise.
func (o *CleanupPolicy) GetExpireDays() int32 {
	if o == nil || IsNil(o.ExpireDays) {
		var ret int32
		return ret
	}
	return *o.ExpireDays
}

// GetExpireDaysOk returns a tuple with the ExpireDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CleanupPolicy) GetExpireDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpireDays) {
		return nil, false
	}
	return o.ExpireDays, true
}

// HasExpireDays returns a boolean if a field has been set.
func (o *CleanupPolicy) HasExpireDays() bool {
	if o != nil && !IsNil(o.ExpireDays) {
		return true
	}

	return false
}

// SetExpireDays gets a reference to the given int32 and assigns it to the ExpireDays field.
func (o *CleanupPolicy) SetExpireDays(v int32) {
	o.ExpireDays = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CleanupPolicy) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CleanupPolicy) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CleanupPolicy) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CleanupPolicy) SetName(v string) {
	o.Name = &v
}

// GetPackagePrefix returns the PackagePrefix field value if set, zero value otherwise.
func (o *CleanupPolicy) GetPackagePrefix() []string {
	if o == nil || IsNil(o.PackagePrefix) {
		var ret []string
		return ret
	}
	return o.PackagePrefix
}

// GetPackagePrefixOk returns a tuple with the PackagePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CleanupPolicy) GetPackagePrefixOk() ([]string, bool) {
	if o == nil || IsNil(o.PackagePrefix) {
		return nil, false
	}
	return o.PackagePrefix, true
}

// HasPackagePrefix returns a boolean if a field has been set.
func (o *CleanupPolicy) HasPackagePrefix() bool {
	if o != nil && !IsNil(o.PackagePrefix) {
		return true
	}

	return false
}

// SetPackagePrefix gets a reference to the given []string and assigns it to the PackagePrefix field.
func (o *CleanupPolicy) SetPackagePrefix(v []string) {
	o.PackagePrefix = v
}

// GetVersionPrefix returns the VersionPrefix field value if set, zero value otherwise.
func (o *CleanupPolicy) GetVersionPrefix() []string {
	if o == nil || IsNil(o.VersionPrefix) {
		var ret []string
		return ret
	}
	return o.VersionPrefix
}

// GetVersionPrefixOk returns a tuple with the VersionPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CleanupPolicy) GetVersionPrefixOk() ([]string, bool) {
	if o == nil || IsNil(o.VersionPrefix) {
		return nil, false
	}
	return o.VersionPrefix, true
}

// HasVersionPrefix returns a boolean if a field has been set.
func (o *CleanupPolicy) HasVersionPrefix() bool {
	if o != nil && !IsNil(o.VersionPrefix) {
		return true
	}

	return false
}

// SetVersionPrefix gets a reference to the given []string and assigns it to the VersionPrefix field.
func (o *CleanupPolicy) SetVersionPrefix(v []string) {
	o.VersionPrefix = v
}

func (o CleanupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CleanupPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpireDays) {
		toSerialize["expireDays"] = o.ExpireDays
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PackagePrefix) {
		toSerialize["packagePrefix"] = o.PackagePrefix
	}
	if !IsNil(o.VersionPrefix) {
		toSerialize["versionPrefix"] = o.VersionPrefix
	}
	return toSerialize, nil
}

type NullableCleanupPolicy struct {
	value *CleanupPolicy
	isSet bool
}

func (v NullableCleanupPolicy) Get() *CleanupPolicy {
	return v.value
}

func (v *NullableCleanupPolicy) Set(val *CleanupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableCleanupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableCleanupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCleanupPolicy(val *CleanupPolicy) *NullableCleanupPolicy {
	return &NullableCleanupPolicy{value: val, isSet: true}
}

func (v NullableCleanupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCleanupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


