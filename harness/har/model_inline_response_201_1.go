/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InlineResponse2011 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineResponse2011{}

// InlineResponse2011 struct for InlineResponse2011
type InlineResponse2011 struct {
	Data Webhook `json:"data"`
	Status Status `json:"status"`
}

type _InlineResponse2011 InlineResponse2011

// NewInlineResponse2011 instantiates a new InlineResponse2011 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2011(data Webhook, status Status) *InlineResponse2011 {
	this := InlineResponse2011{}
	this.Data = data
	this.Status = status
	return &this
}

// NewInlineResponse2011WithDefaults instantiates a new InlineResponse2011 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2011WithDefaults() *InlineResponse2011 {
	this := InlineResponse2011{}
	return &this
}

// GetData returns the Data field value
func (o *InlineResponse2011) GetData() Webhook {
	if o == nil {
		var ret Webhook
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2011) GetDataOk() (*Webhook, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *InlineResponse2011) SetData(v Webhook) {
	o.Data = v
}

// GetStatus returns the Status field value
func (o *InlineResponse2011) GetStatus() Status {
	if o == nil {
		var ret Status
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2011) GetStatusOk() (*Status, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InlineResponse2011) SetStatus(v Status) {
	o.Status = v
}

func (o InlineResponse2011) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineResponse2011) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *InlineResponse2011) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInlineResponse2011 := _InlineResponse2011{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInlineResponse2011)

	if err != nil {
		return err
	}

	*o = InlineResponse2011(varInlineResponse2011)

	return err
}

type NullableInlineResponse2011 struct {
	value *InlineResponse2011
	isSet bool
}

func (v NullableInlineResponse2011) Get() *InlineResponse2011 {
	return v.value
}

func (v *NullableInlineResponse2011) Set(val *InlineResponse2011) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2011) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2011) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2011(val *InlineResponse2011) *NullableInlineResponse2011 {
	return &NullableInlineResponse2011{value: val, isSet: true}
}

func (v NullableInlineResponse2011) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2011) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


