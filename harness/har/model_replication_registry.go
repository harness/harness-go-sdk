/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"fmt"
)

// ReplicationRegistry - struct for ReplicationRegistry
type ReplicationRegistry struct {
	JfrogReplicationRegistry *JfrogReplicationRegistry
	LocalReplicationRegistry *LocalReplicationRegistry
}

// JfrogReplicationRegistryAsReplicationRegistry is a convenience function that returns JfrogReplicationRegistry wrapped in ReplicationRegistry
func JfrogReplicationRegistryAsReplicationRegistry(v *JfrogReplicationRegistry) ReplicationRegistry {
	return ReplicationRegistry{
		JfrogReplicationRegistry: v,
	}
}

// LocalReplicationRegistryAsReplicationRegistry is a convenience function that returns LocalReplicationRegistry wrapped in ReplicationRegistry
func LocalReplicationRegistryAsReplicationRegistry(v *LocalReplicationRegistry) ReplicationRegistry {
	return ReplicationRegistry{
		LocalReplicationRegistry: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReplicationRegistry) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into JfrogReplicationRegistry
	err = json.Unmarshal(data, &dst.JfrogReplicationRegistry)
	if err == nil {
		jsonJfrogReplicationRegistry, _ := json.Marshal(dst.JfrogReplicationRegistry)
		if string(jsonJfrogReplicationRegistry) == "{}" { // empty struct
			dst.JfrogReplicationRegistry = nil
		} else {
			match++
		}
	} else {
		dst.JfrogReplicationRegistry = nil
	}

	// try to unmarshal data into LocalReplicationRegistry
	err = json.Unmarshal(data, &dst.LocalReplicationRegistry)
	if err == nil {
		jsonLocalReplicationRegistry, _ := json.Marshal(dst.LocalReplicationRegistry)
		if string(jsonLocalReplicationRegistry) == "{}" { // empty struct
			dst.LocalReplicationRegistry = nil
		} else {
			match++
		}
	} else {
		dst.LocalReplicationRegistry = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.JfrogReplicationRegistry = nil
		dst.LocalReplicationRegistry = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ReplicationRegistry)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ReplicationRegistry)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReplicationRegistry) MarshalJSON() ([]byte, error) {
	if src.JfrogReplicationRegistry != nil {
		return json.Marshal(&src.JfrogReplicationRegistry)
	}

	if src.LocalReplicationRegistry != nil {
		return json.Marshal(&src.LocalReplicationRegistry)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReplicationRegistry) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.JfrogReplicationRegistry != nil {
		return obj.JfrogReplicationRegistry
	}

	if obj.LocalReplicationRegistry != nil {
		return obj.LocalReplicationRegistry
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ReplicationRegistry) GetActualInstanceValue() (interface{}) {
	if obj.JfrogReplicationRegistry != nil {
		return *obj.JfrogReplicationRegistry
	}

	if obj.LocalReplicationRegistry != nil {
		return *obj.LocalReplicationRegistry
	}

	// all schemas are nil
	return nil
}

type NullableReplicationRegistry struct {
	value *ReplicationRegistry
	isSet bool
}

func (v NullableReplicationRegistry) Get() *ReplicationRegistry {
	return v.value
}

func (v *NullableReplicationRegistry) Set(val *ReplicationRegistry) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationRegistry) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationRegistry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationRegistry(val *ReplicationRegistry) *NullableReplicationRegistry {
	return &NullableReplicationRegistry{value: val, isSet: true}
}

func (v NullableReplicationRegistry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationRegistry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


