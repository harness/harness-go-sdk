/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"fmt"
)

// PackageType refers to package
type PackageType string

// List of PackageType
const (
	DOCKER PackageType = "DOCKER"
	MAVEN PackageType = "MAVEN"
	PYTHON PackageType = "PYTHON"
	GENERIC PackageType = "GENERIC"
	HELM PackageType = "HELM"
	NUGET PackageType = "NUGET"
	NPM PackageType = "NPM"
	RPM PackageType = "RPM"
	CARGO PackageType = "CARGO"
)

// All allowed values of PackageType enum
var AllowedPackageTypeEnumValues = []PackageType{
	"DOCKER",
	"MAVEN",
	"PYTHON",
	"GENERIC",
	"HELM",
	"NUGET",
	"NPM",
	"RPM",
	"CARGO",
}

func (v *PackageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PackageType(value)
	for _, existing := range AllowedPackageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PackageType", value)
}

// NewPackageTypeFromValue returns a pointer to a valid PackageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPackageTypeFromValue(v string) (*PackageType, error) {
	ev := PackageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PackageType: valid values are %v", v, AllowedPackageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PackageType) IsValid() bool {
	for _, existing := range AllowedPackageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PackageType value
func (v PackageType) Ptr() *PackageType {
	return &v
}

type NullablePackageType struct {
	value *PackageType
	isSet bool
}

func (v NullablePackageType) Get() *PackageType {
	return v.value
}

func (v *NullablePackageType) Set(val *PackageType) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageType) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageType(val *PackageType) *NullablePackageType {
	return &NullablePackageType{value: val, isSet: true}
}

func (v NullablePackageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

