/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeploymentStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentStats{}

// DeploymentStats DeploymentStats
type DeploymentStats struct {
	PreProduction int32 `json:"PreProduction"`
	Production int32 `json:"Production"`
}

type _DeploymentStats DeploymentStats

// NewDeploymentStats instantiates a new DeploymentStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentStats(preProduction int32, production int32) *DeploymentStats {
	this := DeploymentStats{}
	this.PreProduction = preProduction
	this.Production = production
	return &this
}

// NewDeploymentStatsWithDefaults instantiates a new DeploymentStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentStatsWithDefaults() *DeploymentStats {
	this := DeploymentStats{}
	return &this
}

// GetPreProduction returns the PreProduction field value
func (o *DeploymentStats) GetPreProduction() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PreProduction
}

// GetPreProductionOk returns a tuple with the PreProduction field value
// and a boolean to check if the value has been set.
func (o *DeploymentStats) GetPreProductionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreProduction, true
}

// SetPreProduction sets field value
func (o *DeploymentStats) SetPreProduction(v int32) {
	o.PreProduction = v
}

// GetProduction returns the Production field value
func (o *DeploymentStats) GetProduction() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Production
}

// GetProductionOk returns a tuple with the Production field value
// and a boolean to check if the value has been set.
func (o *DeploymentStats) GetProductionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Production, true
}

// SetProduction sets field value
func (o *DeploymentStats) SetProduction(v int32) {
	o.Production = v
}

func (o DeploymentStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["PreProduction"] = o.PreProduction
	toSerialize["Production"] = o.Production
	return toSerialize, nil
}

func (o *DeploymentStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"PreProduction",
		"Production",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentStats := _DeploymentStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeploymentStats)

	if err != nil {
		return err
	}

	*o = DeploymentStats(varDeploymentStats)

	return err
}

type NullableDeploymentStats struct {
	value *DeploymentStats
	isSet bool
}

func (v NullableDeploymentStats) Get() *DeploymentStats {
	return v.value
}

func (v *NullableDeploymentStats) Set(val *DeploymentStats) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentStats) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentStats(val *DeploymentStats) *NullableDeploymentStats {
	return &NullableDeploymentStats{value: val, isSet: true}
}

func (v NullableDeploymentStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


