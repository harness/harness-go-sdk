/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DockerManifests type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DockerManifests{}

// DockerManifests Harness Manifests
type DockerManifests struct {
	ImageName string `json:"imageName"`
	Manifests []DockerManifestDetails `json:"manifests,omitempty"`
	Version string `json:"version"`
}

type _DockerManifests DockerManifests

// NewDockerManifests instantiates a new DockerManifests object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerManifests(imageName string, version string) *DockerManifests {
	this := DockerManifests{}
	this.ImageName = imageName
	this.Version = version
	return &this
}

// NewDockerManifestsWithDefaults instantiates a new DockerManifests object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerManifestsWithDefaults() *DockerManifests {
	this := DockerManifests{}
	return &this
}

// GetImageName returns the ImageName field value
func (o *DockerManifests) GetImageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value
// and a boolean to check if the value has been set.
func (o *DockerManifests) GetImageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageName, true
}

// SetImageName sets field value
func (o *DockerManifests) SetImageName(v string) {
	o.ImageName = v
}

// GetManifests returns the Manifests field value if set, zero value otherwise.
func (o *DockerManifests) GetManifests() []DockerManifestDetails {
	if o == nil || IsNil(o.Manifests) {
		var ret []DockerManifestDetails
		return ret
	}
	return o.Manifests
}

// GetManifestsOk returns a tuple with the Manifests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerManifests) GetManifestsOk() ([]DockerManifestDetails, bool) {
	if o == nil || IsNil(o.Manifests) {
		return nil, false
	}
	return o.Manifests, true
}

// HasManifests returns a boolean if a field has been set.
func (o *DockerManifests) HasManifests() bool {
	if o != nil && !IsNil(o.Manifests) {
		return true
	}

	return false
}

// SetManifests gets a reference to the given []DockerManifestDetails and assigns it to the Manifests field.
func (o *DockerManifests) SetManifests(v []DockerManifestDetails) {
	o.Manifests = v
}

// GetVersion returns the Version field value
func (o *DockerManifests) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DockerManifests) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DockerManifests) SetVersion(v string) {
	o.Version = v
}

func (o DockerManifests) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DockerManifests) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["imageName"] = o.ImageName
	if !IsNil(o.Manifests) {
		toSerialize["manifests"] = o.Manifests
	}
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *DockerManifests) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imageName",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDockerManifests := _DockerManifests{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDockerManifests)

	if err != nil {
		return err
	}

	*o = DockerManifests(varDockerManifests)

	return err
}

type NullableDockerManifests struct {
	value *DockerManifests
	isSet bool
}

func (v NullableDockerManifests) Get() *DockerManifests {
	return v.value
}

func (v *NullableDockerManifests) Set(val *DockerManifests) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerManifests) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerManifests) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerManifests(val *DockerManifests) *NullableDockerManifests {
	return &NullableDockerManifests{value: val, isSet: true}
}

func (v NullableDockerManifests) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerManifests) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


