/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"fmt"
)

// RegistryConfig - SubConfig specific for Virtual or Upstream Registry
type RegistryConfig struct {
	UpstreamConfig *UpstreamConfig
	VirtualConfig *VirtualConfig
}

// UpstreamConfigAsRegistryConfig is a convenience function that returns UpstreamConfig wrapped in RegistryConfig
func UpstreamConfigAsRegistryConfig(v *UpstreamConfig) RegistryConfig {
	return RegistryConfig{
		UpstreamConfig: v,
	}
}

// VirtualConfigAsRegistryConfig is a convenience function that returns VirtualConfig wrapped in RegistryConfig
func VirtualConfigAsRegistryConfig(v *VirtualConfig) RegistryConfig {
	return RegistryConfig{
		VirtualConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RegistryConfig) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'UPSTREAM'
	if jsonDict["type"] == "UPSTREAM" {
		// try to unmarshal JSON data into UpstreamConfig
		err = json.Unmarshal(data, &dst.UpstreamConfig)
		if err == nil {
			return nil // data stored in dst.UpstreamConfig, return on the first match
		} else {
			dst.UpstreamConfig = nil
			return fmt.Errorf("failed to unmarshal RegistryConfig as UpstreamConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'VIRTUAL'
	if jsonDict["type"] == "VIRTUAL" {
		// try to unmarshal JSON data into VirtualConfig
		err = json.Unmarshal(data, &dst.VirtualConfig)
		if err == nil {
			return nil // data stored in dst.VirtualConfig, return on the first match
		} else {
			dst.VirtualConfig = nil
			return fmt.Errorf("failed to unmarshal RegistryConfig as VirtualConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UpstreamConfig'
	if jsonDict["type"] == "UpstreamConfig" {
		// try to unmarshal JSON data into UpstreamConfig
		err = json.Unmarshal(data, &dst.UpstreamConfig)
		if err == nil {
			return nil // data stored in dst.UpstreamConfig, return on the first match
		} else {
			dst.UpstreamConfig = nil
			return fmt.Errorf("failed to unmarshal RegistryConfig as UpstreamConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'VirtualConfig'
	if jsonDict["type"] == "VirtualConfig" {
		// try to unmarshal JSON data into VirtualConfig
		err = json.Unmarshal(data, &dst.VirtualConfig)
		if err == nil {
			return nil // data stored in dst.VirtualConfig, return on the first match
		} else {
			dst.VirtualConfig = nil
			return fmt.Errorf("failed to unmarshal RegistryConfig as VirtualConfig: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RegistryConfig) MarshalJSON() ([]byte, error) {
	if src.UpstreamConfig != nil {
		return json.Marshal(&src.UpstreamConfig)
	}

	if src.VirtualConfig != nil {
		return json.Marshal(&src.VirtualConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RegistryConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UpstreamConfig != nil {
		return obj.UpstreamConfig
	}

	if obj.VirtualConfig != nil {
		return obj.VirtualConfig
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RegistryConfig) GetActualInstanceValue() (interface{}) {
	if obj.UpstreamConfig != nil {
		return *obj.UpstreamConfig
	}

	if obj.VirtualConfig != nil {
		return *obj.VirtualConfig
	}

	// all schemas are nil
	return nil
}

type NullableRegistryConfig struct {
	value *RegistryConfig
	isSet bool
}

func (v NullableRegistryConfig) Get() *RegistryConfig {
	return v.value
}

func (v *NullableRegistryConfig) Set(val *RegistryConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistryConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistryConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistryConfig(val *RegistryConfig) *NullableRegistryConfig {
	return &NullableRegistryConfig{value: val, isSet: true}
}

func (v NullableRegistryConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistryConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


