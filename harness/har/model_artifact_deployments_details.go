/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArtifactDeploymentsDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtifactDeploymentsDetails{}

// ArtifactDeploymentsDetails Docker Artifact deployments Details
type ArtifactDeploymentsDetails struct {
	Deployments ArtifactDeploymentsList `json:"deployments"`
	DeploymentsStats *DeploymentStats `json:"deploymentsStats,omitempty"`
}

type _ArtifactDeploymentsDetails ArtifactDeploymentsDetails

// NewArtifactDeploymentsDetails instantiates a new ArtifactDeploymentsDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactDeploymentsDetails(deployments ArtifactDeploymentsList) *ArtifactDeploymentsDetails {
	this := ArtifactDeploymentsDetails{}
	this.Deployments = deployments
	return &this
}

// NewArtifactDeploymentsDetailsWithDefaults instantiates a new ArtifactDeploymentsDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactDeploymentsDetailsWithDefaults() *ArtifactDeploymentsDetails {
	this := ArtifactDeploymentsDetails{}
	return &this
}

// GetDeployments returns the Deployments field value
func (o *ArtifactDeploymentsDetails) GetDeployments() ArtifactDeploymentsList {
	if o == nil {
		var ret ArtifactDeploymentsList
		return ret
	}

	return o.Deployments
}

// GetDeploymentsOk returns a tuple with the Deployments field value
// and a boolean to check if the value has been set.
func (o *ArtifactDeploymentsDetails) GetDeploymentsOk() (*ArtifactDeploymentsList, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deployments, true
}

// SetDeployments sets field value
func (o *ArtifactDeploymentsDetails) SetDeployments(v ArtifactDeploymentsList) {
	o.Deployments = v
}

// GetDeploymentsStats returns the DeploymentsStats field value if set, zero value otherwise.
func (o *ArtifactDeploymentsDetails) GetDeploymentsStats() DeploymentStats {
	if o == nil || IsNil(o.DeploymentsStats) {
		var ret DeploymentStats
		return ret
	}
	return *o.DeploymentsStats
}

// GetDeploymentsStatsOk returns a tuple with the DeploymentsStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactDeploymentsDetails) GetDeploymentsStatsOk() (*DeploymentStats, bool) {
	if o == nil || IsNil(o.DeploymentsStats) {
		return nil, false
	}
	return o.DeploymentsStats, true
}

// HasDeploymentsStats returns a boolean if a field has been set.
func (o *ArtifactDeploymentsDetails) HasDeploymentsStats() bool {
	if o != nil && !IsNil(o.DeploymentsStats) {
		return true
	}

	return false
}

// SetDeploymentsStats gets a reference to the given DeploymentStats and assigns it to the DeploymentsStats field.
func (o *ArtifactDeploymentsDetails) SetDeploymentsStats(v DeploymentStats) {
	o.DeploymentsStats = &v
}

func (o ArtifactDeploymentsDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactDeploymentsDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deployments"] = o.Deployments
	if !IsNil(o.DeploymentsStats) {
		toSerialize["deploymentsStats"] = o.DeploymentsStats
	}
	return toSerialize, nil
}

func (o *ArtifactDeploymentsDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deployments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArtifactDeploymentsDetails := _ArtifactDeploymentsDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArtifactDeploymentsDetails)

	if err != nil {
		return err
	}

	*o = ArtifactDeploymentsDetails(varArtifactDeploymentsDetails)

	return err
}

type NullableArtifactDeploymentsDetails struct {
	value *ArtifactDeploymentsDetails
	isSet bool
}

func (v NullableArtifactDeploymentsDetails) Get() *ArtifactDeploymentsDetails {
	return v.value
}

func (v *NullableArtifactDeploymentsDetails) Set(val *ArtifactDeploymentsDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactDeploymentsDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactDeploymentsDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactDeploymentsDetails(val *ArtifactDeploymentsDetails) *NullableArtifactDeploymentsDetails {
	return &NullableArtifactDeploymentsDetails{value: val, isSet: true}
}

func (v NullableArtifactDeploymentsDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactDeploymentsDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


