/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"fmt"
)

// EnvironmentType Environment Type
type EnvironmentType string

// List of EnvironmentType
const (
	PRE_PRODUCTION EnvironmentType = "PreProduction"
	PRODUCTION EnvironmentType = "Production"
)

// All allowed values of EnvironmentType enum
var AllowedEnvironmentTypeEnumValues = []EnvironmentType{
	"PreProduction",
	"Production",
}

func (v *EnvironmentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnvironmentType(value)
	for _, existing := range AllowedEnvironmentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnvironmentType", value)
}

// NewEnvironmentTypeFromValue returns a pointer to a valid EnvironmentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvironmentTypeFromValue(v string) (*EnvironmentType, error) {
	ev := EnvironmentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnvironmentType: valid values are %v", v, AllowedEnvironmentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnvironmentType) IsValid() bool {
	for _, existing := range AllowedEnvironmentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnvironmentType value
func (v EnvironmentType) Ptr() *EnvironmentType {
	return &v
}

type NullableEnvironmentType struct {
	value *EnvironmentType
	isSet bool
}

func (v NullableEnvironmentType) Get() *EnvironmentType {
	return v.value
}

func (v *NullableEnvironmentType) Set(val *EnvironmentType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentType(val *EnvironmentType) *NullableEnvironmentType {
	return &NullableEnvironmentType{value: val, isSet: true}
}

func (v NullableEnvironmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

