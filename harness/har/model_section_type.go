/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"fmt"
)

// SectionType refers to client setup section type
type SectionType string

// List of SectionType
const (
	INLINE SectionType = "INLINE"
	TABS SectionType = "TABS"
)

// All allowed values of SectionType enum
var AllowedSectionTypeEnumValues = []SectionType{
	"INLINE",
	"TABS",
}

func (v *SectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SectionType(value)
	for _, existing := range AllowedSectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SectionType", value)
}

// NewSectionTypeFromValue returns a pointer to a valid SectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSectionTypeFromValue(v string) (*SectionType, error) {
	ev := SectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SectionType: valid values are %v", v, AllowedSectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SectionType) IsValid() bool {
	for _, existing := range AllowedSectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SectionType value
func (v SectionType) Ptr() *SectionType {
	return &v
}

type NullableSectionType struct {
	value *SectionType
	isSet bool
}

func (v NullableSectionType) Get() *SectionType {
	return v.value
}

func (v *NullableSectionType) Set(val *SectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableSectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableSectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectionType(val *SectionType) *NullableSectionType {
	return &NullableSectionType{value: val, isSet: true}
}

func (v NullableSectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

