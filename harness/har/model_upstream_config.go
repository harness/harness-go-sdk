/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpstreamConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpstreamConfig{}

// UpstreamConfig Configuration for Harness Artifact UpstreamProxies
type UpstreamConfig struct {
	Auth NullableUpstreamConfigAuth `json:"auth,omitempty"`
	AuthType AuthType `json:"authType"`
	Source *string `json:"source,omitempty"`
	Url *string `json:"url,omitempty"`
}

type _UpstreamConfig UpstreamConfig

// NewUpstreamConfig instantiates a new UpstreamConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpstreamConfig(authType AuthType) *UpstreamConfig {
	this := UpstreamConfig{}
	this.AuthType = authType
	return &this
}

// NewUpstreamConfigWithDefaults instantiates a new UpstreamConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpstreamConfigWithDefaults() *UpstreamConfig {
	this := UpstreamConfig{}
	return &this
}

// GetAuth returns the Auth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpstreamConfig) GetAuth() UpstreamConfigAuth {
	if o == nil || IsNil(o.Auth.Get()) {
		var ret UpstreamConfigAuth
		return ret
	}
	return *o.Auth.Get()
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpstreamConfig) GetAuthOk() (*UpstreamConfigAuth, bool) {
	if o == nil {
		return nil, false
	}
	return o.Auth.Get(), o.Auth.IsSet()
}

// HasAuth returns a boolean if a field has been set.
func (o *UpstreamConfig) HasAuth() bool {
	if o != nil && o.Auth.IsSet() {
		return true
	}

	return false
}

// SetAuth gets a reference to the given NullableUpstreamConfigAuth and assigns it to the Auth field.
func (o *UpstreamConfig) SetAuth(v UpstreamConfigAuth) {
	o.Auth.Set(&v)
}
// SetAuthNil sets the value for Auth to be an explicit nil
func (o *UpstreamConfig) SetAuthNil() {
	o.Auth.Set(nil)
}

// UnsetAuth ensures that no value is present for Auth, not even an explicit nil
func (o *UpstreamConfig) UnsetAuth() {
	o.Auth.Unset()
}

// GetAuthType returns the AuthType field value
func (o *UpstreamConfig) GetAuthType() AuthType {
	if o == nil {
		var ret AuthType
		return ret
	}

	return o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value
// and a boolean to check if the value has been set.
func (o *UpstreamConfig) GetAuthTypeOk() (*AuthType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthType, true
}

// SetAuthType sets field value
func (o *UpstreamConfig) SetAuthType(v AuthType) {
	o.AuthType = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *UpstreamConfig) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpstreamConfig) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *UpstreamConfig) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *UpstreamConfig) SetSource(v string) {
	o.Source = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UpstreamConfig) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpstreamConfig) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UpstreamConfig) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UpstreamConfig) SetUrl(v string) {
	o.Url = &v
}

func (o UpstreamConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpstreamConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Auth.IsSet() {
		toSerialize["auth"] = o.Auth.Get()
	}
	toSerialize["authType"] = o.AuthType
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

func (o *UpstreamConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpstreamConfig := _UpstreamConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpstreamConfig)

	if err != nil {
		return err
	}

	*o = UpstreamConfig(varUpstreamConfig)

	return err
}

type NullableUpstreamConfig struct {
	value *UpstreamConfig
	isSet bool
}

func (v NullableUpstreamConfig) Get() *UpstreamConfig {
	return v.value
}

func (v *NullableUpstreamConfig) Set(val *UpstreamConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableUpstreamConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableUpstreamConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpstreamConfig(val *UpstreamConfig) *NullableUpstreamConfig {
	return &NullableUpstreamConfig{value: val, isSet: true}
}

func (v NullableUpstreamConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpstreamConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


