/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegistryMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegistryMetadata{}

// RegistryMetadata Harness Artifact Registry Metadata
type RegistryMetadata struct {
	ArtifactsCount *int64 `json:"artifactsCount,omitempty"`
	Description *string `json:"description,omitempty"`
	DownloadsCount *int64 `json:"downloadsCount,omitempty"`
	Identifier string `json:"identifier"`
	Labels []string `json:"labels,omitempty"`
	LastModified *string `json:"lastModified,omitempty"`
	PackageType PackageType `json:"packageType"`
	Path *string `json:"path,omitempty"`
	RegistrySize *string `json:"registrySize,omitempty"`
	Type RegistryType `json:"type"`
	Url string `json:"url"`
}

type _RegistryMetadata RegistryMetadata

// NewRegistryMetadata instantiates a new RegistryMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistryMetadata(identifier string, packageType PackageType, type_ RegistryType, url string) *RegistryMetadata {
	this := RegistryMetadata{}
	this.Identifier = identifier
	this.PackageType = packageType
	this.Type = type_
	this.Url = url
	return &this
}

// NewRegistryMetadataWithDefaults instantiates a new RegistryMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistryMetadataWithDefaults() *RegistryMetadata {
	this := RegistryMetadata{}
	return &this
}

// GetArtifactsCount returns the ArtifactsCount field value if set, zero value otherwise.
func (o *RegistryMetadata) GetArtifactsCount() int64 {
	if o == nil || IsNil(o.ArtifactsCount) {
		var ret int64
		return ret
	}
	return *o.ArtifactsCount
}

// GetArtifactsCountOk returns a tuple with the ArtifactsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryMetadata) GetArtifactsCountOk() (*int64, bool) {
	if o == nil || IsNil(o.ArtifactsCount) {
		return nil, false
	}
	return o.ArtifactsCount, true
}

// HasArtifactsCount returns a boolean if a field has been set.
func (o *RegistryMetadata) HasArtifactsCount() bool {
	if o != nil && !IsNil(o.ArtifactsCount) {
		return true
	}

	return false
}

// SetArtifactsCount gets a reference to the given int64 and assigns it to the ArtifactsCount field.
func (o *RegistryMetadata) SetArtifactsCount(v int64) {
	o.ArtifactsCount = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RegistryMetadata) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryMetadata) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RegistryMetadata) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RegistryMetadata) SetDescription(v string) {
	o.Description = &v
}

// GetDownloadsCount returns the DownloadsCount field value if set, zero value otherwise.
func (o *RegistryMetadata) GetDownloadsCount() int64 {
	if o == nil || IsNil(o.DownloadsCount) {
		var ret int64
		return ret
	}
	return *o.DownloadsCount
}

// GetDownloadsCountOk returns a tuple with the DownloadsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryMetadata) GetDownloadsCountOk() (*int64, bool) {
	if o == nil || IsNil(o.DownloadsCount) {
		return nil, false
	}
	return o.DownloadsCount, true
}

// HasDownloadsCount returns a boolean if a field has been set.
func (o *RegistryMetadata) HasDownloadsCount() bool {
	if o != nil && !IsNil(o.DownloadsCount) {
		return true
	}

	return false
}

// SetDownloadsCount gets a reference to the given int64 and assigns it to the DownloadsCount field.
func (o *RegistryMetadata) SetDownloadsCount(v int64) {
	o.DownloadsCount = &v
}

// GetIdentifier returns the Identifier field value
func (o *RegistryMetadata) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *RegistryMetadata) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *RegistryMetadata) SetIdentifier(v string) {
	o.Identifier = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *RegistryMetadata) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryMetadata) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *RegistryMetadata) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *RegistryMetadata) SetLabels(v []string) {
	o.Labels = v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *RegistryMetadata) GetLastModified() string {
	if o == nil || IsNil(o.LastModified) {
		var ret string
		return ret
	}
	return *o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryMetadata) GetLastModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.LastModified) {
		return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *RegistryMetadata) HasLastModified() bool {
	if o != nil && !IsNil(o.LastModified) {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given string and assigns it to the LastModified field.
func (o *RegistryMetadata) SetLastModified(v string) {
	o.LastModified = &v
}

// GetPackageType returns the PackageType field value
func (o *RegistryMetadata) GetPackageType() PackageType {
	if o == nil {
		var ret PackageType
		return ret
	}

	return o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value
// and a boolean to check if the value has been set.
func (o *RegistryMetadata) GetPackageTypeOk() (*PackageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageType, true
}

// SetPackageType sets field value
func (o *RegistryMetadata) SetPackageType(v PackageType) {
	o.PackageType = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *RegistryMetadata) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryMetadata) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *RegistryMetadata) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *RegistryMetadata) SetPath(v string) {
	o.Path = &v
}

// GetRegistrySize returns the RegistrySize field value if set, zero value otherwise.
func (o *RegistryMetadata) GetRegistrySize() string {
	if o == nil || IsNil(o.RegistrySize) {
		var ret string
		return ret
	}
	return *o.RegistrySize
}

// GetRegistrySizeOk returns a tuple with the RegistrySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryMetadata) GetRegistrySizeOk() (*string, bool) {
	if o == nil || IsNil(o.RegistrySize) {
		return nil, false
	}
	return o.RegistrySize, true
}

// HasRegistrySize returns a boolean if a field has been set.
func (o *RegistryMetadata) HasRegistrySize() bool {
	if o != nil && !IsNil(o.RegistrySize) {
		return true
	}

	return false
}

// SetRegistrySize gets a reference to the given string and assigns it to the RegistrySize field.
func (o *RegistryMetadata) SetRegistrySize(v string) {
	o.RegistrySize = &v
}

// GetType returns the Type field value
func (o *RegistryMetadata) GetType() RegistryType {
	if o == nil {
		var ret RegistryType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RegistryMetadata) GetTypeOk() (*RegistryType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RegistryMetadata) SetType(v RegistryType) {
	o.Type = v
}

// GetUrl returns the Url field value
func (o *RegistryMetadata) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RegistryMetadata) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RegistryMetadata) SetUrl(v string) {
	o.Url = v
}

func (o RegistryMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegistryMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArtifactsCount) {
		toSerialize["artifactsCount"] = o.ArtifactsCount
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DownloadsCount) {
		toSerialize["downloadsCount"] = o.DownloadsCount
	}
	toSerialize["identifier"] = o.Identifier
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.LastModified) {
		toSerialize["lastModified"] = o.LastModified
	}
	toSerialize["packageType"] = o.PackageType
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.RegistrySize) {
		toSerialize["registrySize"] = o.RegistrySize
	}
	toSerialize["type"] = o.Type
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *RegistryMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"packageType",
		"type",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegistryMetadata := _RegistryMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegistryMetadata)

	if err != nil {
		return err
	}

	*o = RegistryMetadata(varRegistryMetadata)

	return err
}

type NullableRegistryMetadata struct {
	value *RegistryMetadata
	isSet bool
}

func (v NullableRegistryMetadata) Get() *RegistryMetadata {
	return v.value
}

func (v *NullableRegistryMetadata) Set(val *RegistryMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistryMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistryMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistryMetadata(val *RegistryMetadata) *NullableRegistryMetadata {
	return &NullableRegistryMetadata{value: val, isSet: true}
}

func (v NullableRegistryMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistryMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


