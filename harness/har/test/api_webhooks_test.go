/*
Harness Artifact Registry API

Testing WebhooksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package har

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_har_WebhooksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WebhooksAPIService CreateWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string

		resp, httpRes, err := apiClient.WebhooksAPI.CreateWebhook(context.Background(), registryRef).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService DeleteWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var webhookIdentifier string

		resp, httpRes, err := apiClient.WebhooksAPI.DeleteWebhook(context.Background(), registryRef, webhookIdentifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService GetWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var webhookIdentifier string

		resp, httpRes, err := apiClient.WebhooksAPI.GetWebhook(context.Background(), registryRef, webhookIdentifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService GetWebhookExecution", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var webhookIdentifier string
		var webhookExecutionId string

		resp, httpRes, err := apiClient.WebhooksAPI.GetWebhookExecution(context.Background(), registryRef, webhookIdentifier, webhookExecutionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService ListWebhookExecutions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var webhookIdentifier string

		resp, httpRes, err := apiClient.WebhooksAPI.ListWebhookExecutions(context.Background(), registryRef, webhookIdentifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService ListWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string

		resp, httpRes, err := apiClient.WebhooksAPI.ListWebhooks(context.Background(), registryRef).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService ReTriggerWebhookExecution", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var webhookIdentifier string
		var webhookExecutionId string

		resp, httpRes, err := apiClient.WebhooksAPI.ReTriggerWebhookExecution(context.Background(), registryRef, webhookIdentifier, webhookExecutionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService UpdateWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var webhookIdentifier string

		resp, httpRes, err := apiClient.WebhooksAPI.UpdateWebhook(context.Background(), registryRef, webhookIdentifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
