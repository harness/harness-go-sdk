/*
Harness Artifact Registry API

Testing RegistriesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package har

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_har_RegistriesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RegistriesAPIService CreateRegistry", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RegistriesAPI.CreateRegistry(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistriesAPIService DeleteRegistry", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string

		resp, httpRes, err := apiClient.RegistriesAPI.DeleteRegistry(context.Background(), registryRef).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistriesAPIService GetAllArtifactsByRegistry", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string

		resp, httpRes, err := apiClient.RegistriesAPI.GetAllArtifactsByRegistry(context.Background(), registryRef).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistriesAPIService GetClientSetupDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string

		resp, httpRes, err := apiClient.RegistriesAPI.GetClientSetupDetails(context.Background(), registryRef).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistriesAPIService GetRegistry", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string

		resp, httpRes, err := apiClient.RegistriesAPI.GetRegistry(context.Background(), registryRef).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistriesAPIService ModifyRegistry", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string

		resp, httpRes, err := apiClient.RegistriesAPI.ModifyRegistry(context.Background(), registryRef).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
