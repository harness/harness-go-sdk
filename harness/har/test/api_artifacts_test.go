/*
Harness Artifact Registry API

Testing ArtifactsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package har

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_har_ArtifactsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ArtifactsAPIService DeleteArtifact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var artifact string

		resp, httpRes, err := apiClient.ArtifactsAPI.DeleteArtifact(context.Background(), registryRef, artifact).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArtifactsAPIService DeleteArtifactVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var artifact string
		var version string

		resp, httpRes, err := apiClient.ArtifactsAPI.DeleteArtifactVersion(context.Background(), registryRef, artifact, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArtifactsAPIService GetAllArtifactVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var artifact string

		resp, httpRes, err := apiClient.ArtifactsAPI.GetAllArtifactVersions(context.Background(), registryRef, artifact).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArtifactsAPIService GetArtifactDeployments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var artifact string
		var version string

		resp, httpRes, err := apiClient.ArtifactsAPI.GetArtifactDeployments(context.Background(), registryRef, artifact, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArtifactsAPIService GetArtifactDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var artifact string
		var version string

		resp, httpRes, err := apiClient.ArtifactsAPI.GetArtifactDetails(context.Background(), registryRef, artifact, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArtifactsAPIService GetArtifactFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var artifact string
		var version string
		var fileName string

		resp, httpRes, err := apiClient.ArtifactsAPI.GetArtifactFile(context.Background(), registryRef, artifact, version, fileName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArtifactsAPIService GetArtifactFiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var artifact string
		var version string

		resp, httpRes, err := apiClient.ArtifactsAPI.GetArtifactFiles(context.Background(), registryRef, artifact, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArtifactsAPIService GetArtifactStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var artifact string

		resp, httpRes, err := apiClient.ArtifactsAPI.GetArtifactStats(context.Background(), registryRef, artifact).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArtifactsAPIService GetArtifactStatsForRegistry", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string

		resp, httpRes, err := apiClient.ArtifactsAPI.GetArtifactStatsForRegistry(context.Background(), registryRef).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArtifactsAPIService GetArtifactSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var artifact string

		resp, httpRes, err := apiClient.ArtifactsAPI.GetArtifactSummary(context.Background(), registryRef, artifact).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArtifactsAPIService GetArtifactVersionSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var artifact string
		var version string

		resp, httpRes, err := apiClient.ArtifactsAPI.GetArtifactVersionSummary(context.Background(), registryRef, artifact, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArtifactsAPIService ListArtifactLabels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string

		resp, httpRes, err := apiClient.ArtifactsAPI.ListArtifactLabels(context.Background(), registryRef).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArtifactsAPIService RedirectHarnessArtifact", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryIdentifier string
		var artifact string

		httpRes, err := apiClient.ArtifactsAPI.RedirectHarnessArtifact(context.Background(), registryIdentifier, artifact).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ArtifactsAPIService UpdateArtifactLabels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var registryRef string
		var artifact string

		resp, httpRes, err := apiClient.ArtifactsAPI.UpdateArtifactLabels(context.Background(), registryRef, artifact).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
