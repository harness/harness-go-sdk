/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FileDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileDetail{}

// FileDetail File Detail
type FileDetail struct {
	Checksums []string `json:"checksums"`
	CreatedAt string `json:"createdAt"`
	DownloadCommand string `json:"downloadCommand"`
	Name string `json:"name"`
	Size string `json:"size"`
}

type _FileDetail FileDetail

// NewFileDetail instantiates a new FileDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileDetail(checksums []string, createdAt string, downloadCommand string, name string, size string) *FileDetail {
	this := FileDetail{}
	this.Checksums = checksums
	this.CreatedAt = createdAt
	this.DownloadCommand = downloadCommand
	this.Name = name
	this.Size = size
	return &this
}

// NewFileDetailWithDefaults instantiates a new FileDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileDetailWithDefaults() *FileDetail {
	this := FileDetail{}
	return &this
}

// GetChecksums returns the Checksums field value
func (o *FileDetail) GetChecksums() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Checksums
}

// GetChecksumsOk returns a tuple with the Checksums field value
// and a boolean to check if the value has been set.
func (o *FileDetail) GetChecksumsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Checksums, true
}

// SetChecksums sets field value
func (o *FileDetail) SetChecksums(v []string) {
	o.Checksums = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *FileDetail) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *FileDetail) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *FileDetail) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetDownloadCommand returns the DownloadCommand field value
func (o *FileDetail) GetDownloadCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DownloadCommand
}

// GetDownloadCommandOk returns a tuple with the DownloadCommand field value
// and a boolean to check if the value has been set.
func (o *FileDetail) GetDownloadCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DownloadCommand, true
}

// SetDownloadCommand sets field value
func (o *FileDetail) SetDownloadCommand(v string) {
	o.DownloadCommand = v
}

// GetName returns the Name field value
func (o *FileDetail) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FileDetail) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FileDetail) SetName(v string) {
	o.Name = v
}

// GetSize returns the Size field value
func (o *FileDetail) GetSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *FileDetail) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *FileDetail) SetSize(v string) {
	o.Size = v
}

func (o FileDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["checksums"] = o.Checksums
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["downloadCommand"] = o.DownloadCommand
	toSerialize["name"] = o.Name
	toSerialize["size"] = o.Size
	return toSerialize, nil
}

func (o *FileDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"checksums",
		"createdAt",
		"downloadCommand",
		"name",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileDetail := _FileDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileDetail)

	if err != nil {
		return err
	}

	*o = FileDetail(varFileDetail)

	return err
}

type NullableFileDetail struct {
	value *FileDetail
	isSet bool
}

func (v NullableFileDetail) Get() *FileDetail {
	return v.value
}

func (v *NullableFileDetail) Set(val *FileDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableFileDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableFileDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileDetail(val *FileDetail) *NullableFileDetail {
	return &NullableFileDetail{value: val, isSet: true}
}

func (v NullableFileDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


