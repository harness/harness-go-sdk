/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"fmt"
)

// ArtifactDetail - Artifact Detail
type ArtifactDetail struct {
	CargoArtifactDetailConfig *CargoArtifactDetailConfig
	DockerArtifactDetailConfig *DockerArtifactDetailConfig
	GenericArtifactDetailConfig *GenericArtifactDetailConfig
	HelmArtifactDetailConfig *HelmArtifactDetailConfig
	MavenArtifactDetailConfig *MavenArtifactDetailConfig
	NpmArtifactDetailConfig *NpmArtifactDetailConfig
	NugetArtifactDetailConfig *NugetArtifactDetailConfig
	PythonArtifactDetailConfig *PythonArtifactDetailConfig
	RpmArtifactDetailConfig *RpmArtifactDetailConfig
}

// CargoArtifactDetailConfigAsArtifactDetail is a convenience function that returns CargoArtifactDetailConfig wrapped in ArtifactDetail
func CargoArtifactDetailConfigAsArtifactDetail(v *CargoArtifactDetailConfig) ArtifactDetail {
	return ArtifactDetail{
		CargoArtifactDetailConfig: v,
	}
}

// DockerArtifactDetailConfigAsArtifactDetail is a convenience function that returns DockerArtifactDetailConfig wrapped in ArtifactDetail
func DockerArtifactDetailConfigAsArtifactDetail(v *DockerArtifactDetailConfig) ArtifactDetail {
	return ArtifactDetail{
		DockerArtifactDetailConfig: v,
	}
}

// GenericArtifactDetailConfigAsArtifactDetail is a convenience function that returns GenericArtifactDetailConfig wrapped in ArtifactDetail
func GenericArtifactDetailConfigAsArtifactDetail(v *GenericArtifactDetailConfig) ArtifactDetail {
	return ArtifactDetail{
		GenericArtifactDetailConfig: v,
	}
}

// HelmArtifactDetailConfigAsArtifactDetail is a convenience function that returns HelmArtifactDetailConfig wrapped in ArtifactDetail
func HelmArtifactDetailConfigAsArtifactDetail(v *HelmArtifactDetailConfig) ArtifactDetail {
	return ArtifactDetail{
		HelmArtifactDetailConfig: v,
	}
}

// MavenArtifactDetailConfigAsArtifactDetail is a convenience function that returns MavenArtifactDetailConfig wrapped in ArtifactDetail
func MavenArtifactDetailConfigAsArtifactDetail(v *MavenArtifactDetailConfig) ArtifactDetail {
	return ArtifactDetail{
		MavenArtifactDetailConfig: v,
	}
}

// NpmArtifactDetailConfigAsArtifactDetail is a convenience function that returns NpmArtifactDetailConfig wrapped in ArtifactDetail
func NpmArtifactDetailConfigAsArtifactDetail(v *NpmArtifactDetailConfig) ArtifactDetail {
	return ArtifactDetail{
		NpmArtifactDetailConfig: v,
	}
}

// NugetArtifactDetailConfigAsArtifactDetail is a convenience function that returns NugetArtifactDetailConfig wrapped in ArtifactDetail
func NugetArtifactDetailConfigAsArtifactDetail(v *NugetArtifactDetailConfig) ArtifactDetail {
	return ArtifactDetail{
		NugetArtifactDetailConfig: v,
	}
}

// PythonArtifactDetailConfigAsArtifactDetail is a convenience function that returns PythonArtifactDetailConfig wrapped in ArtifactDetail
func PythonArtifactDetailConfigAsArtifactDetail(v *PythonArtifactDetailConfig) ArtifactDetail {
	return ArtifactDetail{
		PythonArtifactDetailConfig: v,
	}
}

// RpmArtifactDetailConfigAsArtifactDetail is a convenience function that returns RpmArtifactDetailConfig wrapped in ArtifactDetail
func RpmArtifactDetailConfigAsArtifactDetail(v *RpmArtifactDetailConfig) ArtifactDetail {
	return ArtifactDetail{
		RpmArtifactDetailConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ArtifactDetail) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'CARGO'
	if jsonDict["packageType"] == "CARGO" {
		// try to unmarshal JSON data into CargoArtifactDetailConfig
		err = json.Unmarshal(data, &dst.CargoArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.CargoArtifactDetailConfig, return on the first match
		} else {
			dst.CargoArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as CargoArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DOCKER'
	if jsonDict["packageType"] == "DOCKER" {
		// try to unmarshal JSON data into DockerArtifactDetailConfig
		err = json.Unmarshal(data, &dst.DockerArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.DockerArtifactDetailConfig, return on the first match
		} else {
			dst.DockerArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as DockerArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GENERIC'
	if jsonDict["packageType"] == "GENERIC" {
		// try to unmarshal JSON data into GenericArtifactDetailConfig
		err = json.Unmarshal(data, &dst.GenericArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.GenericArtifactDetailConfig, return on the first match
		} else {
			dst.GenericArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as GenericArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'HELM'
	if jsonDict["packageType"] == "HELM" {
		// try to unmarshal JSON data into HelmArtifactDetailConfig
		err = json.Unmarshal(data, &dst.HelmArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.HelmArtifactDetailConfig, return on the first match
		} else {
			dst.HelmArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as HelmArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAVEN'
	if jsonDict["packageType"] == "MAVEN" {
		// try to unmarshal JSON data into MavenArtifactDetailConfig
		err = json.Unmarshal(data, &dst.MavenArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.MavenArtifactDetailConfig, return on the first match
		} else {
			dst.MavenArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as MavenArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NPM'
	if jsonDict["packageType"] == "NPM" {
		// try to unmarshal JSON data into NpmArtifactDetailConfig
		err = json.Unmarshal(data, &dst.NpmArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.NpmArtifactDetailConfig, return on the first match
		} else {
			dst.NpmArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as NpmArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NUGET'
	if jsonDict["packageType"] == "NUGET" {
		// try to unmarshal JSON data into NugetArtifactDetailConfig
		err = json.Unmarshal(data, &dst.NugetArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.NugetArtifactDetailConfig, return on the first match
		} else {
			dst.NugetArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as NugetArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PYTHON'
	if jsonDict["packageType"] == "PYTHON" {
		// try to unmarshal JSON data into PythonArtifactDetailConfig
		err = json.Unmarshal(data, &dst.PythonArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.PythonArtifactDetailConfig, return on the first match
		} else {
			dst.PythonArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as PythonArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RPM'
	if jsonDict["packageType"] == "RPM" {
		// try to unmarshal JSON data into RpmArtifactDetailConfig
		err = json.Unmarshal(data, &dst.RpmArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.RpmArtifactDetailConfig, return on the first match
		} else {
			dst.RpmArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as RpmArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CargoArtifactDetailConfig'
	if jsonDict["packageType"] == "CargoArtifactDetailConfig" {
		// try to unmarshal JSON data into CargoArtifactDetailConfig
		err = json.Unmarshal(data, &dst.CargoArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.CargoArtifactDetailConfig, return on the first match
		} else {
			dst.CargoArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as CargoArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DockerArtifactDetailConfig'
	if jsonDict["packageType"] == "DockerArtifactDetailConfig" {
		// try to unmarshal JSON data into DockerArtifactDetailConfig
		err = json.Unmarshal(data, &dst.DockerArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.DockerArtifactDetailConfig, return on the first match
		} else {
			dst.DockerArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as DockerArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GenericArtifactDetailConfig'
	if jsonDict["packageType"] == "GenericArtifactDetailConfig" {
		// try to unmarshal JSON data into GenericArtifactDetailConfig
		err = json.Unmarshal(data, &dst.GenericArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.GenericArtifactDetailConfig, return on the first match
		} else {
			dst.GenericArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as GenericArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'HelmArtifactDetailConfig'
	if jsonDict["packageType"] == "HelmArtifactDetailConfig" {
		// try to unmarshal JSON data into HelmArtifactDetailConfig
		err = json.Unmarshal(data, &dst.HelmArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.HelmArtifactDetailConfig, return on the first match
		} else {
			dst.HelmArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as HelmArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MavenArtifactDetailConfig'
	if jsonDict["packageType"] == "MavenArtifactDetailConfig" {
		// try to unmarshal JSON data into MavenArtifactDetailConfig
		err = json.Unmarshal(data, &dst.MavenArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.MavenArtifactDetailConfig, return on the first match
		} else {
			dst.MavenArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as MavenArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NpmArtifactDetailConfig'
	if jsonDict["packageType"] == "NpmArtifactDetailConfig" {
		// try to unmarshal JSON data into NpmArtifactDetailConfig
		err = json.Unmarshal(data, &dst.NpmArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.NpmArtifactDetailConfig, return on the first match
		} else {
			dst.NpmArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as NpmArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NugetArtifactDetailConfig'
	if jsonDict["packageType"] == "NugetArtifactDetailConfig" {
		// try to unmarshal JSON data into NugetArtifactDetailConfig
		err = json.Unmarshal(data, &dst.NugetArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.NugetArtifactDetailConfig, return on the first match
		} else {
			dst.NugetArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as NugetArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PythonArtifactDetailConfig'
	if jsonDict["packageType"] == "PythonArtifactDetailConfig" {
		// try to unmarshal JSON data into PythonArtifactDetailConfig
		err = json.Unmarshal(data, &dst.PythonArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.PythonArtifactDetailConfig, return on the first match
		} else {
			dst.PythonArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as PythonArtifactDetailConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RpmArtifactDetailConfig'
	if jsonDict["packageType"] == "RpmArtifactDetailConfig" {
		// try to unmarshal JSON data into RpmArtifactDetailConfig
		err = json.Unmarshal(data, &dst.RpmArtifactDetailConfig)
		if err == nil {
			return nil // data stored in dst.RpmArtifactDetailConfig, return on the first match
		} else {
			dst.RpmArtifactDetailConfig = nil
			return fmt.Errorf("failed to unmarshal ArtifactDetail as RpmArtifactDetailConfig: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ArtifactDetail) MarshalJSON() ([]byte, error) {
	if src.CargoArtifactDetailConfig != nil {
		return json.Marshal(&src.CargoArtifactDetailConfig)
	}

	if src.DockerArtifactDetailConfig != nil {
		return json.Marshal(&src.DockerArtifactDetailConfig)
	}

	if src.GenericArtifactDetailConfig != nil {
		return json.Marshal(&src.GenericArtifactDetailConfig)
	}

	if src.HelmArtifactDetailConfig != nil {
		return json.Marshal(&src.HelmArtifactDetailConfig)
	}

	if src.MavenArtifactDetailConfig != nil {
		return json.Marshal(&src.MavenArtifactDetailConfig)
	}

	if src.NpmArtifactDetailConfig != nil {
		return json.Marshal(&src.NpmArtifactDetailConfig)
	}

	if src.NugetArtifactDetailConfig != nil {
		return json.Marshal(&src.NugetArtifactDetailConfig)
	}

	if src.PythonArtifactDetailConfig != nil {
		return json.Marshal(&src.PythonArtifactDetailConfig)
	}

	if src.RpmArtifactDetailConfig != nil {
		return json.Marshal(&src.RpmArtifactDetailConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ArtifactDetail) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CargoArtifactDetailConfig != nil {
		return obj.CargoArtifactDetailConfig
	}

	if obj.DockerArtifactDetailConfig != nil {
		return obj.DockerArtifactDetailConfig
	}

	if obj.GenericArtifactDetailConfig != nil {
		return obj.GenericArtifactDetailConfig
	}

	if obj.HelmArtifactDetailConfig != nil {
		return obj.HelmArtifactDetailConfig
	}

	if obj.MavenArtifactDetailConfig != nil {
		return obj.MavenArtifactDetailConfig
	}

	if obj.NpmArtifactDetailConfig != nil {
		return obj.NpmArtifactDetailConfig
	}

	if obj.NugetArtifactDetailConfig != nil {
		return obj.NugetArtifactDetailConfig
	}

	if obj.PythonArtifactDetailConfig != nil {
		return obj.PythonArtifactDetailConfig
	}

	if obj.RpmArtifactDetailConfig != nil {
		return obj.RpmArtifactDetailConfig
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ArtifactDetail) GetActualInstanceValue() (interface{}) {
	if obj.CargoArtifactDetailConfig != nil {
		return *obj.CargoArtifactDetailConfig
	}

	if obj.DockerArtifactDetailConfig != nil {
		return *obj.DockerArtifactDetailConfig
	}

	if obj.GenericArtifactDetailConfig != nil {
		return *obj.GenericArtifactDetailConfig
	}

	if obj.HelmArtifactDetailConfig != nil {
		return *obj.HelmArtifactDetailConfig
	}

	if obj.MavenArtifactDetailConfig != nil {
		return *obj.MavenArtifactDetailConfig
	}

	if obj.NpmArtifactDetailConfig != nil {
		return *obj.NpmArtifactDetailConfig
	}

	if obj.NugetArtifactDetailConfig != nil {
		return *obj.NugetArtifactDetailConfig
	}

	if obj.PythonArtifactDetailConfig != nil {
		return *obj.PythonArtifactDetailConfig
	}

	if obj.RpmArtifactDetailConfig != nil {
		return *obj.RpmArtifactDetailConfig
	}

	// all schemas are nil
	return nil
}

type NullableArtifactDetail struct {
	value *ArtifactDetail
	isSet bool
}

func (v NullableArtifactDetail) Get() *ArtifactDetail {
	return v.value
}

func (v *NullableArtifactDetail) Set(val *ArtifactDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactDetail(val *ArtifactDetail) *NullableArtifactDetail {
	return &NullableArtifactDetail{value: val, isSet: true}
}

func (v NullableArtifactDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


