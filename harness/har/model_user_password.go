/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserPassword type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPassword{}

// UserPassword struct for UserPassword
type UserPassword struct {
	SecretIdentifier *string `json:"secretIdentifier,omitempty"`
	SecretSpaceId *int32 `json:"secretSpaceId,omitempty"`
	SecretSpacePath *string `json:"secretSpacePath,omitempty"`
	UserName string `json:"userName"`
}

type _UserPassword UserPassword

// NewUserPassword instantiates a new UserPassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPassword(userName string) *UserPassword {
	this := UserPassword{}
	this.UserName = userName
	return &this
}

// NewUserPasswordWithDefaults instantiates a new UserPassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPasswordWithDefaults() *UserPassword {
	this := UserPassword{}
	return &this
}

// GetSecretIdentifier returns the SecretIdentifier field value if set, zero value otherwise.
func (o *UserPassword) GetSecretIdentifier() string {
	if o == nil || IsNil(o.SecretIdentifier) {
		var ret string
		return ret
	}
	return *o.SecretIdentifier
}

// GetSecretIdentifierOk returns a tuple with the SecretIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPassword) GetSecretIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.SecretIdentifier) {
		return nil, false
	}
	return o.SecretIdentifier, true
}

// HasSecretIdentifier returns a boolean if a field has been set.
func (o *UserPassword) HasSecretIdentifier() bool {
	if o != nil && !IsNil(o.SecretIdentifier) {
		return true
	}

	return false
}

// SetSecretIdentifier gets a reference to the given string and assigns it to the SecretIdentifier field.
func (o *UserPassword) SetSecretIdentifier(v string) {
	o.SecretIdentifier = &v
}

// GetSecretSpaceId returns the SecretSpaceId field value if set, zero value otherwise.
func (o *UserPassword) GetSecretSpaceId() int32 {
	if o == nil || IsNil(o.SecretSpaceId) {
		var ret int32
		return ret
	}
	return *o.SecretSpaceId
}

// GetSecretSpaceIdOk returns a tuple with the SecretSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPassword) GetSecretSpaceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SecretSpaceId) {
		return nil, false
	}
	return o.SecretSpaceId, true
}

// HasSecretSpaceId returns a boolean if a field has been set.
func (o *UserPassword) HasSecretSpaceId() bool {
	if o != nil && !IsNil(o.SecretSpaceId) {
		return true
	}

	return false
}

// SetSecretSpaceId gets a reference to the given int32 and assigns it to the SecretSpaceId field.
func (o *UserPassword) SetSecretSpaceId(v int32) {
	o.SecretSpaceId = &v
}

// GetSecretSpacePath returns the SecretSpacePath field value if set, zero value otherwise.
func (o *UserPassword) GetSecretSpacePath() string {
	if o == nil || IsNil(o.SecretSpacePath) {
		var ret string
		return ret
	}
	return *o.SecretSpacePath
}

// GetSecretSpacePathOk returns a tuple with the SecretSpacePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPassword) GetSecretSpacePathOk() (*string, bool) {
	if o == nil || IsNil(o.SecretSpacePath) {
		return nil, false
	}
	return o.SecretSpacePath, true
}

// HasSecretSpacePath returns a boolean if a field has been set.
func (o *UserPassword) HasSecretSpacePath() bool {
	if o != nil && !IsNil(o.SecretSpacePath) {
		return true
	}

	return false
}

// SetSecretSpacePath gets a reference to the given string and assigns it to the SecretSpacePath field.
func (o *UserPassword) SetSecretSpacePath(v string) {
	o.SecretSpacePath = &v
}

// GetUserName returns the UserName field value
func (o *UserPassword) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *UserPassword) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *UserPassword) SetUserName(v string) {
	o.UserName = v
}

func (o UserPassword) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPassword) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SecretIdentifier) {
		toSerialize["secretIdentifier"] = o.SecretIdentifier
	}
	if !IsNil(o.SecretSpaceId) {
		toSerialize["secretSpaceId"] = o.SecretSpaceId
	}
	if !IsNil(o.SecretSpacePath) {
		toSerialize["secretSpacePath"] = o.SecretSpacePath
	}
	toSerialize["userName"] = o.UserName
	return toSerialize, nil
}

func (o *UserPassword) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserPassword := _UserPassword{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserPassword)

	if err != nil {
		return err
	}

	*o = UserPassword(varUserPassword)

	return err
}

type NullableUserPassword struct {
	value *UserPassword
	isSet bool
}

func (v NullableUserPassword) Get() *UserPassword {
	return v.value
}

func (v *NullableUserPassword) Set(val *UserPassword) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPassword) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPassword(val *UserPassword) *NullableUserPassword {
	return &NullableUserPassword{value: val, isSet: true}
}

func (v NullableUserPassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


