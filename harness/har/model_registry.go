/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Registry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Registry{}

// Registry Harness Artifact Registry
type Registry struct {
	AllowedPattern []string `json:"allowedPattern,omitempty"`
	BlockedPattern []string `json:"blockedPattern,omitempty"`
	CleanupPolicy []CleanupPolicy `json:"cleanupPolicy,omitempty"`
	Config *RegistryConfig `json:"config,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	Description *string `json:"description,omitempty"`
	Identifier string `json:"identifier"`
	Labels []string `json:"labels,omitempty"`
	ModifiedAt *string `json:"modifiedAt,omitempty"`
	PackageType PackageType `json:"packageType"`
	Scanners []Scanner `json:"scanners,omitempty"`
	Url string `json:"url"`
}

type _Registry Registry

// NewRegistry instantiates a new Registry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistry(identifier string, packageType PackageType, url string) *Registry {
	this := Registry{}
	this.Identifier = identifier
	this.PackageType = packageType
	this.Url = url
	return &this
}

// NewRegistryWithDefaults instantiates a new Registry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistryWithDefaults() *Registry {
	this := Registry{}
	return &this
}

// GetAllowedPattern returns the AllowedPattern field value if set, zero value otherwise.
func (o *Registry) GetAllowedPattern() []string {
	if o == nil || IsNil(o.AllowedPattern) {
		var ret []string
		return ret
	}
	return o.AllowedPattern
}

// GetAllowedPatternOk returns a tuple with the AllowedPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registry) GetAllowedPatternOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedPattern) {
		return nil, false
	}
	return o.AllowedPattern, true
}

// HasAllowedPattern returns a boolean if a field has been set.
func (o *Registry) HasAllowedPattern() bool {
	if o != nil && !IsNil(o.AllowedPattern) {
		return true
	}

	return false
}

// SetAllowedPattern gets a reference to the given []string and assigns it to the AllowedPattern field.
func (o *Registry) SetAllowedPattern(v []string) {
	o.AllowedPattern = v
}

// GetBlockedPattern returns the BlockedPattern field value if set, zero value otherwise.
func (o *Registry) GetBlockedPattern() []string {
	if o == nil || IsNil(o.BlockedPattern) {
		var ret []string
		return ret
	}
	return o.BlockedPattern
}

// GetBlockedPatternOk returns a tuple with the BlockedPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registry) GetBlockedPatternOk() ([]string, bool) {
	if o == nil || IsNil(o.BlockedPattern) {
		return nil, false
	}
	return o.BlockedPattern, true
}

// HasBlockedPattern returns a boolean if a field has been set.
func (o *Registry) HasBlockedPattern() bool {
	if o != nil && !IsNil(o.BlockedPattern) {
		return true
	}

	return false
}

// SetBlockedPattern gets a reference to the given []string and assigns it to the BlockedPattern field.
func (o *Registry) SetBlockedPattern(v []string) {
	o.BlockedPattern = v
}

// GetCleanupPolicy returns the CleanupPolicy field value if set, zero value otherwise.
func (o *Registry) GetCleanupPolicy() []CleanupPolicy {
	if o == nil || IsNil(o.CleanupPolicy) {
		var ret []CleanupPolicy
		return ret
	}
	return o.CleanupPolicy
}

// GetCleanupPolicyOk returns a tuple with the CleanupPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registry) GetCleanupPolicyOk() ([]CleanupPolicy, bool) {
	if o == nil || IsNil(o.CleanupPolicy) {
		return nil, false
	}
	return o.CleanupPolicy, true
}

// HasCleanupPolicy returns a boolean if a field has been set.
func (o *Registry) HasCleanupPolicy() bool {
	if o != nil && !IsNil(o.CleanupPolicy) {
		return true
	}

	return false
}

// SetCleanupPolicy gets a reference to the given []CleanupPolicy and assigns it to the CleanupPolicy field.
func (o *Registry) SetCleanupPolicy(v []CleanupPolicy) {
	o.CleanupPolicy = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *Registry) GetConfig() RegistryConfig {
	if o == nil || IsNil(o.Config) {
		var ret RegistryConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registry) GetConfigOk() (*RegistryConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *Registry) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given RegistryConfig and assigns it to the Config field.
func (o *Registry) SetConfig(v RegistryConfig) {
	o.Config = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Registry) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registry) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Registry) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Registry) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Registry) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registry) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Registry) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Registry) SetDescription(v string) {
	o.Description = &v
}

// GetIdentifier returns the Identifier field value
func (o *Registry) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *Registry) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *Registry) SetIdentifier(v string) {
	o.Identifier = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *Registry) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registry) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *Registry) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *Registry) SetLabels(v []string) {
	o.Labels = v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *Registry) GetModifiedAt() string {
	if o == nil || IsNil(o.ModifiedAt) {
		var ret string
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registry) GetModifiedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *Registry) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given string and assigns it to the ModifiedAt field.
func (o *Registry) SetModifiedAt(v string) {
	o.ModifiedAt = &v
}

// GetPackageType returns the PackageType field value
func (o *Registry) GetPackageType() PackageType {
	if o == nil {
		var ret PackageType
		return ret
	}

	return o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value
// and a boolean to check if the value has been set.
func (o *Registry) GetPackageTypeOk() (*PackageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageType, true
}

// SetPackageType sets field value
func (o *Registry) SetPackageType(v PackageType) {
	o.PackageType = v
}

// GetScanners returns the Scanners field value if set, zero value otherwise.
func (o *Registry) GetScanners() []Scanner {
	if o == nil || IsNil(o.Scanners) {
		var ret []Scanner
		return ret
	}
	return o.Scanners
}

// GetScannersOk returns a tuple with the Scanners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Registry) GetScannersOk() ([]Scanner, bool) {
	if o == nil || IsNil(o.Scanners) {
		return nil, false
	}
	return o.Scanners, true
}

// HasScanners returns a boolean if a field has been set.
func (o *Registry) HasScanners() bool {
	if o != nil && !IsNil(o.Scanners) {
		return true
	}

	return false
}

// SetScanners gets a reference to the given []Scanner and assigns it to the Scanners field.
func (o *Registry) SetScanners(v []Scanner) {
	o.Scanners = v
}

// GetUrl returns the Url field value
func (o *Registry) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Registry) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Registry) SetUrl(v string) {
	o.Url = v
}

func (o Registry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Registry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedPattern) {
		toSerialize["allowedPattern"] = o.AllowedPattern
	}
	if !IsNil(o.BlockedPattern) {
		toSerialize["blockedPattern"] = o.BlockedPattern
	}
	if !IsNil(o.CleanupPolicy) {
		toSerialize["cleanupPolicy"] = o.CleanupPolicy
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["identifier"] = o.Identifier
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	toSerialize["packageType"] = o.PackageType
	if !IsNil(o.Scanners) {
		toSerialize["scanners"] = o.Scanners
	}
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *Registry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"packageType",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegistry := _Registry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegistry)

	if err != nil {
		return err
	}

	*o = Registry(varRegistry)

	return err
}

type NullableRegistry struct {
	value *Registry
	isSet bool
}

func (v NullableRegistry) Get() *Registry {
	return v.value
}

func (v *NullableRegistry) Set(val *Registry) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistry) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistry(val *Registry) *NullableRegistry {
	return &NullableRegistry{value: val, isSet: true}
}

func (v NullableRegistry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


