/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
)

// checks if the ListArtifactVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListArtifactVersion{}

// ListArtifactVersion A list of Artifact versions
type ListArtifactVersion struct {
	// A list of Artifact versions
	ArtifactVersions []ArtifactVersionMetadata `json:"artifactVersions,omitempty"`
	// The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`
	// The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`
	// The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`
	// The number of items per page
	PageSize *int32 `json:"pageSize,omitempty"`
}

// NewListArtifactVersion instantiates a new ListArtifactVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListArtifactVersion() *ListArtifactVersion {
	this := ListArtifactVersion{}
	return &this
}

// NewListArtifactVersionWithDefaults instantiates a new ListArtifactVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListArtifactVersionWithDefaults() *ListArtifactVersion {
	this := ListArtifactVersion{}
	return &this
}

// GetArtifactVersions returns the ArtifactVersions field value if set, zero value otherwise.
func (o *ListArtifactVersion) GetArtifactVersions() []ArtifactVersionMetadata {
	if o == nil || IsNil(o.ArtifactVersions) {
		var ret []ArtifactVersionMetadata
		return ret
	}
	return o.ArtifactVersions
}

// GetArtifactVersionsOk returns a tuple with the ArtifactVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListArtifactVersion) GetArtifactVersionsOk() ([]ArtifactVersionMetadata, bool) {
	if o == nil || IsNil(o.ArtifactVersions) {
		return nil, false
	}
	return o.ArtifactVersions, true
}

// HasArtifactVersions returns a boolean if a field has been set.
func (o *ListArtifactVersion) HasArtifactVersions() bool {
	if o != nil && !IsNil(o.ArtifactVersions) {
		return true
	}

	return false
}

// SetArtifactVersions gets a reference to the given []ArtifactVersionMetadata and assigns it to the ArtifactVersions field.
func (o *ListArtifactVersion) SetArtifactVersions(v []ArtifactVersionMetadata) {
	o.ArtifactVersions = v
}

// GetItemCount returns the ItemCount field value if set, zero value otherwise.
func (o *ListArtifactVersion) GetItemCount() int64 {
	if o == nil || IsNil(o.ItemCount) {
		var ret int64
		return ret
	}
	return *o.ItemCount
}

// GetItemCountOk returns a tuple with the ItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListArtifactVersion) GetItemCountOk() (*int64, bool) {
	if o == nil || IsNil(o.ItemCount) {
		return nil, false
	}
	return o.ItemCount, true
}

// HasItemCount returns a boolean if a field has been set.
func (o *ListArtifactVersion) HasItemCount() bool {
	if o != nil && !IsNil(o.ItemCount) {
		return true
	}

	return false
}

// SetItemCount gets a reference to the given int64 and assigns it to the ItemCount field.
func (o *ListArtifactVersion) SetItemCount(v int64) {
	o.ItemCount = &v
}

// GetPageCount returns the PageCount field value if set, zero value otherwise.
func (o *ListArtifactVersion) GetPageCount() int64 {
	if o == nil || IsNil(o.PageCount) {
		var ret int64
		return ret
	}
	return *o.PageCount
}

// GetPageCountOk returns a tuple with the PageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListArtifactVersion) GetPageCountOk() (*int64, bool) {
	if o == nil || IsNil(o.PageCount) {
		return nil, false
	}
	return o.PageCount, true
}

// HasPageCount returns a boolean if a field has been set.
func (o *ListArtifactVersion) HasPageCount() bool {
	if o != nil && !IsNil(o.PageCount) {
		return true
	}

	return false
}

// SetPageCount gets a reference to the given int64 and assigns it to the PageCount field.
func (o *ListArtifactVersion) SetPageCount(v int64) {
	o.PageCount = &v
}

// GetPageIndex returns the PageIndex field value if set, zero value otherwise.
func (o *ListArtifactVersion) GetPageIndex() int64 {
	if o == nil || IsNil(o.PageIndex) {
		var ret int64
		return ret
	}
	return *o.PageIndex
}

// GetPageIndexOk returns a tuple with the PageIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListArtifactVersion) GetPageIndexOk() (*int64, bool) {
	if o == nil || IsNil(o.PageIndex) {
		return nil, false
	}
	return o.PageIndex, true
}

// HasPageIndex returns a boolean if a field has been set.
func (o *ListArtifactVersion) HasPageIndex() bool {
	if o != nil && !IsNil(o.PageIndex) {
		return true
	}

	return false
}

// SetPageIndex gets a reference to the given int64 and assigns it to the PageIndex field.
func (o *ListArtifactVersion) SetPageIndex(v int64) {
	o.PageIndex = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *ListArtifactVersion) GetPageSize() int32 {
	if o == nil || IsNil(o.PageSize) {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListArtifactVersion) GetPageSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *ListArtifactVersion) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *ListArtifactVersion) SetPageSize(v int32) {
	o.PageSize = &v
}

func (o ListArtifactVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListArtifactVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArtifactVersions) {
		toSerialize["artifactVersions"] = o.ArtifactVersions
	}
	if !IsNil(o.ItemCount) {
		toSerialize["itemCount"] = o.ItemCount
	}
	if !IsNil(o.PageCount) {
		toSerialize["pageCount"] = o.PageCount
	}
	if !IsNil(o.PageIndex) {
		toSerialize["pageIndex"] = o.PageIndex
	}
	if !IsNil(o.PageSize) {
		toSerialize["pageSize"] = o.PageSize
	}
	return toSerialize, nil
}

type NullableListArtifactVersion struct {
	value *ListArtifactVersion
	isSet bool
}

func (v NullableListArtifactVersion) Get() *ListArtifactVersion {
	return v.value
}

func (v *NullableListArtifactVersion) Set(val *ListArtifactVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableListArtifactVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableListArtifactVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListArtifactVersion(val *ListArtifactVersion) *NullableListArtifactVersion {
	return &NullableListArtifactVersion{value: val, isSet: true}
}

func (v NullableListArtifactVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListArtifactVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


