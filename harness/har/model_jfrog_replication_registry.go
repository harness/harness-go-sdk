/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JfrogReplicationRegistry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JfrogReplicationRegistry{}

// JfrogReplicationRegistry struct for JfrogReplicationRegistry
type JfrogReplicationRegistry struct {
	Namespace string `json:"namespace"`
	PasswordSecretId *string `json:"passwordSecretId,omitempty"`
	PasswordSecretSpaceId *string `json:"passwordSecretSpaceId,omitempty"`
	Url string `json:"url"`
	Username *string `json:"username,omitempty"`
}

type _JfrogReplicationRegistry JfrogReplicationRegistry

// NewJfrogReplicationRegistry instantiates a new JfrogReplicationRegistry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJfrogReplicationRegistry(namespace string, url string) *JfrogReplicationRegistry {
	this := JfrogReplicationRegistry{}
	this.Namespace = namespace
	this.Url = url
	return &this
}

// NewJfrogReplicationRegistryWithDefaults instantiates a new JfrogReplicationRegistry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJfrogReplicationRegistryWithDefaults() *JfrogReplicationRegistry {
	this := JfrogReplicationRegistry{}
	return &this
}

// GetNamespace returns the Namespace field value
func (o *JfrogReplicationRegistry) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *JfrogReplicationRegistry) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *JfrogReplicationRegistry) SetNamespace(v string) {
	o.Namespace = v
}

// GetPasswordSecretId returns the PasswordSecretId field value if set, zero value otherwise.
func (o *JfrogReplicationRegistry) GetPasswordSecretId() string {
	if o == nil || IsNil(o.PasswordSecretId) {
		var ret string
		return ret
	}
	return *o.PasswordSecretId
}

// GetPasswordSecretIdOk returns a tuple with the PasswordSecretId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JfrogReplicationRegistry) GetPasswordSecretIdOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordSecretId) {
		return nil, false
	}
	return o.PasswordSecretId, true
}

// HasPasswordSecretId returns a boolean if a field has been set.
func (o *JfrogReplicationRegistry) HasPasswordSecretId() bool {
	if o != nil && !IsNil(o.PasswordSecretId) {
		return true
	}

	return false
}

// SetPasswordSecretId gets a reference to the given string and assigns it to the PasswordSecretId field.
func (o *JfrogReplicationRegistry) SetPasswordSecretId(v string) {
	o.PasswordSecretId = &v
}

// GetPasswordSecretSpaceId returns the PasswordSecretSpaceId field value if set, zero value otherwise.
func (o *JfrogReplicationRegistry) GetPasswordSecretSpaceId() string {
	if o == nil || IsNil(o.PasswordSecretSpaceId) {
		var ret string
		return ret
	}
	return *o.PasswordSecretSpaceId
}

// GetPasswordSecretSpaceIdOk returns a tuple with the PasswordSecretSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JfrogReplicationRegistry) GetPasswordSecretSpaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordSecretSpaceId) {
		return nil, false
	}
	return o.PasswordSecretSpaceId, true
}

// HasPasswordSecretSpaceId returns a boolean if a field has been set.
func (o *JfrogReplicationRegistry) HasPasswordSecretSpaceId() bool {
	if o != nil && !IsNil(o.PasswordSecretSpaceId) {
		return true
	}

	return false
}

// SetPasswordSecretSpaceId gets a reference to the given string and assigns it to the PasswordSecretSpaceId field.
func (o *JfrogReplicationRegistry) SetPasswordSecretSpaceId(v string) {
	o.PasswordSecretSpaceId = &v
}

// GetUrl returns the Url field value
func (o *JfrogReplicationRegistry) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *JfrogReplicationRegistry) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *JfrogReplicationRegistry) SetUrl(v string) {
	o.Url = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *JfrogReplicationRegistry) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JfrogReplicationRegistry) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *JfrogReplicationRegistry) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *JfrogReplicationRegistry) SetUsername(v string) {
	o.Username = &v
}

func (o JfrogReplicationRegistry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JfrogReplicationRegistry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namespace"] = o.Namespace
	if !IsNil(o.PasswordSecretId) {
		toSerialize["passwordSecretId"] = o.PasswordSecretId
	}
	if !IsNil(o.PasswordSecretSpaceId) {
		toSerialize["passwordSecretSpaceId"] = o.PasswordSecretSpaceId
	}
	toSerialize["url"] = o.Url
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

func (o *JfrogReplicationRegistry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespace",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJfrogReplicationRegistry := _JfrogReplicationRegistry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJfrogReplicationRegistry)

	if err != nil {
		return err
	}

	*o = JfrogReplicationRegistry(varJfrogReplicationRegistry)

	return err
}

type NullableJfrogReplicationRegistry struct {
	value *JfrogReplicationRegistry
	isSet bool
}

func (v NullableJfrogReplicationRegistry) Get() *JfrogReplicationRegistry {
	return v.value
}

func (v *NullableJfrogReplicationRegistry) Set(val *JfrogReplicationRegistry) {
	v.value = val
	v.isSet = true
}

func (v NullableJfrogReplicationRegistry) IsSet() bool {
	return v.isSet
}

func (v *NullableJfrogReplicationRegistry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJfrogReplicationRegistry(val *JfrogReplicationRegistry) *NullableJfrogReplicationRegistry {
	return &NullableJfrogReplicationRegistry{value: val, isSet: true}
}

func (v NullableJfrogReplicationRegistry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJfrogReplicationRegistry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


