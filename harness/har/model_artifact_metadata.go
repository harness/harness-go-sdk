/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArtifactMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtifactMetadata{}

// ArtifactMetadata Artifact Metadata
type ArtifactMetadata struct {
	DeploymentMetadata *DeploymentMetadata `json:"deploymentMetadata,omitempty"`
	DownloadsCount *int64 `json:"downloadsCount,omitempty"`
	Labels []string `json:"labels,omitempty"`
	LastModified *string `json:"lastModified,omitempty"`
	LatestVersion string `json:"latestVersion"`
	Name string `json:"name"`
	PackageType *PackageType `json:"packageType,omitempty"`
	PullCommand *string `json:"pullCommand,omitempty"`
	RegistryIdentifier string `json:"registryIdentifier"`
	RegistryPath string `json:"registryPath"`
	Version string `json:"version"`
}

type _ArtifactMetadata ArtifactMetadata

// NewArtifactMetadata instantiates a new ArtifactMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactMetadata(latestVersion string, name string, registryIdentifier string, registryPath string, version string) *ArtifactMetadata {
	this := ArtifactMetadata{}
	this.LatestVersion = latestVersion
	this.Name = name
	this.RegistryIdentifier = registryIdentifier
	this.RegistryPath = registryPath
	this.Version = version
	return &this
}

// NewArtifactMetadataWithDefaults instantiates a new ArtifactMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactMetadataWithDefaults() *ArtifactMetadata {
	this := ArtifactMetadata{}
	return &this
}

// GetDeploymentMetadata returns the DeploymentMetadata field value if set, zero value otherwise.
func (o *ArtifactMetadata) GetDeploymentMetadata() DeploymentMetadata {
	if o == nil || IsNil(o.DeploymentMetadata) {
		var ret DeploymentMetadata
		return ret
	}
	return *o.DeploymentMetadata
}

// GetDeploymentMetadataOk returns a tuple with the DeploymentMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactMetadata) GetDeploymentMetadataOk() (*DeploymentMetadata, bool) {
	if o == nil || IsNil(o.DeploymentMetadata) {
		return nil, false
	}
	return o.DeploymentMetadata, true
}

// HasDeploymentMetadata returns a boolean if a field has been set.
func (o *ArtifactMetadata) HasDeploymentMetadata() bool {
	if o != nil && !IsNil(o.DeploymentMetadata) {
		return true
	}

	return false
}

// SetDeploymentMetadata gets a reference to the given DeploymentMetadata and assigns it to the DeploymentMetadata field.
func (o *ArtifactMetadata) SetDeploymentMetadata(v DeploymentMetadata) {
	o.DeploymentMetadata = &v
}

// GetDownloadsCount returns the DownloadsCount field value if set, zero value otherwise.
func (o *ArtifactMetadata) GetDownloadsCount() int64 {
	if o == nil || IsNil(o.DownloadsCount) {
		var ret int64
		return ret
	}
	return *o.DownloadsCount
}

// GetDownloadsCountOk returns a tuple with the DownloadsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactMetadata) GetDownloadsCountOk() (*int64, bool) {
	if o == nil || IsNil(o.DownloadsCount) {
		return nil, false
	}
	return o.DownloadsCount, true
}

// HasDownloadsCount returns a boolean if a field has been set.
func (o *ArtifactMetadata) HasDownloadsCount() bool {
	if o != nil && !IsNil(o.DownloadsCount) {
		return true
	}

	return false
}

// SetDownloadsCount gets a reference to the given int64 and assigns it to the DownloadsCount field.
func (o *ArtifactMetadata) SetDownloadsCount(v int64) {
	o.DownloadsCount = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ArtifactMetadata) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactMetadata) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ArtifactMetadata) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *ArtifactMetadata) SetLabels(v []string) {
	o.Labels = v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *ArtifactMetadata) GetLastModified() string {
	if o == nil || IsNil(o.LastModified) {
		var ret string
		return ret
	}
	return *o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactMetadata) GetLastModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.LastModified) {
		return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *ArtifactMetadata) HasLastModified() bool {
	if o != nil && !IsNil(o.LastModified) {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given string and assigns it to the LastModified field.
func (o *ArtifactMetadata) SetLastModified(v string) {
	o.LastModified = &v
}

// GetLatestVersion returns the LatestVersion field value
func (o *ArtifactMetadata) GetLatestVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LatestVersion
}

// GetLatestVersionOk returns a tuple with the LatestVersion field value
// and a boolean to check if the value has been set.
func (o *ArtifactMetadata) GetLatestVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LatestVersion, true
}

// SetLatestVersion sets field value
func (o *ArtifactMetadata) SetLatestVersion(v string) {
	o.LatestVersion = v
}

// GetName returns the Name field value
func (o *ArtifactMetadata) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ArtifactMetadata) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ArtifactMetadata) SetName(v string) {
	o.Name = v
}

// GetPackageType returns the PackageType field value if set, zero value otherwise.
func (o *ArtifactMetadata) GetPackageType() PackageType {
	if o == nil || IsNil(o.PackageType) {
		var ret PackageType
		return ret
	}
	return *o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactMetadata) GetPackageTypeOk() (*PackageType, bool) {
	if o == nil || IsNil(o.PackageType) {
		return nil, false
	}
	return o.PackageType, true
}

// HasPackageType returns a boolean if a field has been set.
func (o *ArtifactMetadata) HasPackageType() bool {
	if o != nil && !IsNil(o.PackageType) {
		return true
	}

	return false
}

// SetPackageType gets a reference to the given PackageType and assigns it to the PackageType field.
func (o *ArtifactMetadata) SetPackageType(v PackageType) {
	o.PackageType = &v
}

// GetPullCommand returns the PullCommand field value if set, zero value otherwise.
func (o *ArtifactMetadata) GetPullCommand() string {
	if o == nil || IsNil(o.PullCommand) {
		var ret string
		return ret
	}
	return *o.PullCommand
}

// GetPullCommandOk returns a tuple with the PullCommand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactMetadata) GetPullCommandOk() (*string, bool) {
	if o == nil || IsNil(o.PullCommand) {
		return nil, false
	}
	return o.PullCommand, true
}

// HasPullCommand returns a boolean if a field has been set.
func (o *ArtifactMetadata) HasPullCommand() bool {
	if o != nil && !IsNil(o.PullCommand) {
		return true
	}

	return false
}

// SetPullCommand gets a reference to the given string and assigns it to the PullCommand field.
func (o *ArtifactMetadata) SetPullCommand(v string) {
	o.PullCommand = &v
}

// GetRegistryIdentifier returns the RegistryIdentifier field value
func (o *ArtifactMetadata) GetRegistryIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistryIdentifier
}

// GetRegistryIdentifierOk returns a tuple with the RegistryIdentifier field value
// and a boolean to check if the value has been set.
func (o *ArtifactMetadata) GetRegistryIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistryIdentifier, true
}

// SetRegistryIdentifier sets field value
func (o *ArtifactMetadata) SetRegistryIdentifier(v string) {
	o.RegistryIdentifier = v
}

// GetRegistryPath returns the RegistryPath field value
func (o *ArtifactMetadata) GetRegistryPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistryPath
}

// GetRegistryPathOk returns a tuple with the RegistryPath field value
// and a boolean to check if the value has been set.
func (o *ArtifactMetadata) GetRegistryPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistryPath, true
}

// SetRegistryPath sets field value
func (o *ArtifactMetadata) SetRegistryPath(v string) {
	o.RegistryPath = v
}

// GetVersion returns the Version field value
func (o *ArtifactMetadata) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ArtifactMetadata) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ArtifactMetadata) SetVersion(v string) {
	o.Version = v
}

func (o ArtifactMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeploymentMetadata) {
		toSerialize["deploymentMetadata"] = o.DeploymentMetadata
	}
	if !IsNil(o.DownloadsCount) {
		toSerialize["downloadsCount"] = o.DownloadsCount
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.LastModified) {
		toSerialize["lastModified"] = o.LastModified
	}
	toSerialize["latestVersion"] = o.LatestVersion
	toSerialize["name"] = o.Name
	if !IsNil(o.PackageType) {
		toSerialize["packageType"] = o.PackageType
	}
	if !IsNil(o.PullCommand) {
		toSerialize["pullCommand"] = o.PullCommand
	}
	toSerialize["registryIdentifier"] = o.RegistryIdentifier
	toSerialize["registryPath"] = o.RegistryPath
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *ArtifactMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"latestVersion",
		"name",
		"registryIdentifier",
		"registryPath",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArtifactMetadata := _ArtifactMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArtifactMetadata)

	if err != nil {
		return err
	}

	*o = ArtifactMetadata(varArtifactMetadata)

	return err
}

type NullableArtifactMetadata struct {
	value *ArtifactMetadata
	isSet bool
}

func (v NullableArtifactMetadata) Get() *ArtifactMetadata {
	return v.value
}

func (v *NullableArtifactMetadata) Set(val *ArtifactMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactMetadata(val *ArtifactMetadata) *NullableArtifactMetadata {
	return &NullableArtifactMetadata{value: val, isSet: true}
}

func (v NullableArtifactMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


