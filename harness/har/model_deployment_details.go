/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeploymentDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentDetails{}

// DeploymentDetails struct for DeploymentDetails
type DeploymentDetails struct {
	NonProdDeployment int32 `json:"nonProdDeployment"`
	ProdDeployment int32 `json:"prodDeployment"`
	TotalDeployment int32 `json:"totalDeployment"`
}

type _DeploymentDetails DeploymentDetails

// NewDeploymentDetails instantiates a new DeploymentDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentDetails(nonProdDeployment int32, prodDeployment int32, totalDeployment int32) *DeploymentDetails {
	this := DeploymentDetails{}
	this.NonProdDeployment = nonProdDeployment
	this.ProdDeployment = prodDeployment
	this.TotalDeployment = totalDeployment
	return &this
}

// NewDeploymentDetailsWithDefaults instantiates a new DeploymentDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentDetailsWithDefaults() *DeploymentDetails {
	this := DeploymentDetails{}
	return &this
}

// GetNonProdDeployment returns the NonProdDeployment field value
func (o *DeploymentDetails) GetNonProdDeployment() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NonProdDeployment
}

// GetNonProdDeploymentOk returns a tuple with the NonProdDeployment field value
// and a boolean to check if the value has been set.
func (o *DeploymentDetails) GetNonProdDeploymentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NonProdDeployment, true
}

// SetNonProdDeployment sets field value
func (o *DeploymentDetails) SetNonProdDeployment(v int32) {
	o.NonProdDeployment = v
}

// GetProdDeployment returns the ProdDeployment field value
func (o *DeploymentDetails) GetProdDeployment() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProdDeployment
}

// GetProdDeploymentOk returns a tuple with the ProdDeployment field value
// and a boolean to check if the value has been set.
func (o *DeploymentDetails) GetProdDeploymentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProdDeployment, true
}

// SetProdDeployment sets field value
func (o *DeploymentDetails) SetProdDeployment(v int32) {
	o.ProdDeployment = v
}

// GetTotalDeployment returns the TotalDeployment field value
func (o *DeploymentDetails) GetTotalDeployment() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalDeployment
}

// GetTotalDeploymentOk returns a tuple with the TotalDeployment field value
// and a boolean to check if the value has been set.
func (o *DeploymentDetails) GetTotalDeploymentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalDeployment, true
}

// SetTotalDeployment sets field value
func (o *DeploymentDetails) SetTotalDeployment(v int32) {
	o.TotalDeployment = v
}

func (o DeploymentDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nonProdDeployment"] = o.NonProdDeployment
	toSerialize["prodDeployment"] = o.ProdDeployment
	toSerialize["totalDeployment"] = o.TotalDeployment
	return toSerialize, nil
}

func (o *DeploymentDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nonProdDeployment",
		"prodDeployment",
		"totalDeployment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentDetails := _DeploymentDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeploymentDetails)

	if err != nil {
		return err
	}

	*o = DeploymentDetails(varDeploymentDetails)

	return err
}

type NullableDeploymentDetails struct {
	value *DeploymentDetails
	isSet bool
}

func (v NullableDeploymentDetails) Get() *DeploymentDetails {
	return v.value
}

func (v *NullableDeploymentDetails) Set(val *DeploymentDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentDetails(val *DeploymentDetails) *NullableDeploymentDetails {
	return &NullableDeploymentDetails{value: val, isSet: true}
}

func (v NullableDeploymentDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


