/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DockerLayersSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DockerLayersSummary{}

// DockerLayersSummary Harness Layers Summary
type DockerLayersSummary struct {
	Digest string `json:"digest"`
	Layers []DockerLayerEntry `json:"layers,omitempty"`
	OsArch *string `json:"osArch,omitempty"`
}

type _DockerLayersSummary DockerLayersSummary

// NewDockerLayersSummary instantiates a new DockerLayersSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerLayersSummary(digest string) *DockerLayersSummary {
	this := DockerLayersSummary{}
	this.Digest = digest
	return &this
}

// NewDockerLayersSummaryWithDefaults instantiates a new DockerLayersSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerLayersSummaryWithDefaults() *DockerLayersSummary {
	this := DockerLayersSummary{}
	return &this
}

// GetDigest returns the Digest field value
func (o *DockerLayersSummary) GetDigest() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Digest
}

// GetDigestOk returns a tuple with the Digest field value
// and a boolean to check if the value has been set.
func (o *DockerLayersSummary) GetDigestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Digest, true
}

// SetDigest sets field value
func (o *DockerLayersSummary) SetDigest(v string) {
	o.Digest = v
}

// GetLayers returns the Layers field value if set, zero value otherwise.
func (o *DockerLayersSummary) GetLayers() []DockerLayerEntry {
	if o == nil || IsNil(o.Layers) {
		var ret []DockerLayerEntry
		return ret
	}
	return o.Layers
}

// GetLayersOk returns a tuple with the Layers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerLayersSummary) GetLayersOk() ([]DockerLayerEntry, bool) {
	if o == nil || IsNil(o.Layers) {
		return nil, false
	}
	return o.Layers, true
}

// HasLayers returns a boolean if a field has been set.
func (o *DockerLayersSummary) HasLayers() bool {
	if o != nil && !IsNil(o.Layers) {
		return true
	}

	return false
}

// SetLayers gets a reference to the given []DockerLayerEntry and assigns it to the Layers field.
func (o *DockerLayersSummary) SetLayers(v []DockerLayerEntry) {
	o.Layers = v
}

// GetOsArch returns the OsArch field value if set, zero value otherwise.
func (o *DockerLayersSummary) GetOsArch() string {
	if o == nil || IsNil(o.OsArch) {
		var ret string
		return ret
	}
	return *o.OsArch
}

// GetOsArchOk returns a tuple with the OsArch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerLayersSummary) GetOsArchOk() (*string, bool) {
	if o == nil || IsNil(o.OsArch) {
		return nil, false
	}
	return o.OsArch, true
}

// HasOsArch returns a boolean if a field has been set.
func (o *DockerLayersSummary) HasOsArch() bool {
	if o != nil && !IsNil(o.OsArch) {
		return true
	}

	return false
}

// SetOsArch gets a reference to the given string and assigns it to the OsArch field.
func (o *DockerLayersSummary) SetOsArch(v string) {
	o.OsArch = &v
}

func (o DockerLayersSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DockerLayersSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["digest"] = o.Digest
	if !IsNil(o.Layers) {
		toSerialize["layers"] = o.Layers
	}
	if !IsNil(o.OsArch) {
		toSerialize["osArch"] = o.OsArch
	}
	return toSerialize, nil
}

func (o *DockerLayersSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"digest",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDockerLayersSummary := _DockerLayersSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDockerLayersSummary)

	if err != nil {
		return err
	}

	*o = DockerLayersSummary(varDockerLayersSummary)

	return err
}

type NullableDockerLayersSummary struct {
	value *DockerLayersSummary
	isSet bool
}

func (v NullableDockerLayersSummary) Get() *DockerLayersSummary {
	return v.value
}

func (v *NullableDockerLayersSummary) Set(val *DockerLayersSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerLayersSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerLayersSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerLayersSummary(val *DockerLayersSummary) *NullableDockerLayersSummary {
	return &NullableDockerLayersSummary{value: val, isSet: true}
}

func (v NullableDockerLayersSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerLayersSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


