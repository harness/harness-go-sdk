/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
)

// checks if the WebhookExecResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookExecResponse{}

// WebhookExecResponse Harness Regstries HTTP Webhook Response
type WebhookExecResponse struct {
	Body *string `json:"body,omitempty"`
	Headers *string `json:"headers,omitempty"`
	Status *string `json:"status,omitempty"`
	StatusCode *int32 `json:"statusCode,omitempty"`
}

// NewWebhookExecResponse instantiates a new WebhookExecResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookExecResponse() *WebhookExecResponse {
	this := WebhookExecResponse{}
	return &this
}

// NewWebhookExecResponseWithDefaults instantiates a new WebhookExecResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookExecResponseWithDefaults() *WebhookExecResponse {
	this := WebhookExecResponse{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *WebhookExecResponse) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookExecResponse) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *WebhookExecResponse) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *WebhookExecResponse) SetBody(v string) {
	o.Body = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *WebhookExecResponse) GetHeaders() string {
	if o == nil || IsNil(o.Headers) {
		var ret string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookExecResponse) GetHeadersOk() (*string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *WebhookExecResponse) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given string and assigns it to the Headers field.
func (o *WebhookExecResponse) SetHeaders(v string) {
	o.Headers = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WebhookExecResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookExecResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WebhookExecResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *WebhookExecResponse) SetStatus(v string) {
	o.Status = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *WebhookExecResponse) GetStatusCode() int32 {
	if o == nil || IsNil(o.StatusCode) {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookExecResponse) GetStatusCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *WebhookExecResponse) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *WebhookExecResponse) SetStatusCode(v int32) {
	o.StatusCode = &v
}

func (o WebhookExecResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookExecResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	return toSerialize, nil
}

type NullableWebhookExecResponse struct {
	value *WebhookExecResponse
	isSet bool
}

func (v NullableWebhookExecResponse) Get() *WebhookExecResponse {
	return v.value
}

func (v *NullableWebhookExecResponse) Set(val *WebhookExecResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookExecResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookExecResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookExecResponse(val *WebhookExecResponse) *NullableWebhookExecResponse {
	return &NullableWebhookExecResponse{value: val, isSet: true}
}

func (v NullableWebhookExecResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookExecResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


