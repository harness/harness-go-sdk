/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"fmt"
)

// AuthType Authentication type
type AuthType string

// List of AuthType
const (
	USER_PASSWORD AuthType = "UserPassword"
	ACCESS_KEY_SECRET_KEY AuthType = "AccessKeySecretKey"
	ANONYMOUS AuthType = "Anonymous"
)

// All allowed values of AuthType enum
var AllowedAuthTypeEnumValues = []AuthType{
	"UserPassword",
	"AccessKeySecretKey",
	"Anonymous",
}

func (v *AuthType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthType(value)
	for _, existing := range AllowedAuthTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthType", value)
}

// NewAuthTypeFromValue returns a pointer to a valid AuthType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthTypeFromValue(v string) (*AuthType, error) {
	ev := AuthType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthType: valid values are %v", v, AllowedAuthTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthType) IsValid() bool {
	for _, existing := range AllowedAuthTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthType value
func (v AuthType) Ptr() *AuthType {
	return &v
}

type NullableAuthType struct {
	value *AuthType
	isSet bool
}

func (v NullableAuthType) Get() *AuthType {
	return v.value
}

func (v *NullableAuthType) Set(val *AuthType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthType(val *AuthType) *NullableAuthType {
	return &NullableAuthType{value: val, isSet: true}
}

func (v NullableAuthType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

