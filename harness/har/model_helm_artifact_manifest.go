/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HelmArtifactManifest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmArtifactManifest{}

// HelmArtifactManifest Helm Artifact Manifest
type HelmArtifactManifest struct {
	Manifest string `json:"manifest"`
}

type _HelmArtifactManifest HelmArtifactManifest

// NewHelmArtifactManifest instantiates a new HelmArtifactManifest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmArtifactManifest(manifest string) *HelmArtifactManifest {
	this := HelmArtifactManifest{}
	this.Manifest = manifest
	return &this
}

// NewHelmArtifactManifestWithDefaults instantiates a new HelmArtifactManifest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmArtifactManifestWithDefaults() *HelmArtifactManifest {
	this := HelmArtifactManifest{}
	return &this
}

// GetManifest returns the Manifest field value
func (o *HelmArtifactManifest) GetManifest() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Manifest
}

// GetManifestOk returns a tuple with the Manifest field value
// and a boolean to check if the value has been set.
func (o *HelmArtifactManifest) GetManifestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Manifest, true
}

// SetManifest sets field value
func (o *HelmArtifactManifest) SetManifest(v string) {
	o.Manifest = v
}

func (o HelmArtifactManifest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmArtifactManifest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["manifest"] = o.Manifest
	return toSerialize, nil
}

func (o *HelmArtifactManifest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"manifest",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelmArtifactManifest := _HelmArtifactManifest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHelmArtifactManifest)

	if err != nil {
		return err
	}

	*o = HelmArtifactManifest(varHelmArtifactManifest)

	return err
}

type NullableHelmArtifactManifest struct {
	value *HelmArtifactManifest
	isSet bool
}

func (v NullableHelmArtifactManifest) Get() *HelmArtifactManifest {
	return v.value
}

func (v *NullableHelmArtifactManifest) Set(val *HelmArtifactManifest) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmArtifactManifest) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmArtifactManifest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmArtifactManifest(val *HelmArtifactManifest) *NullableHelmArtifactManifest {
	return &NullableHelmArtifactManifest{value: val, isSet: true}
}

func (v NullableHelmArtifactManifest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmArtifactManifest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


