/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DockerArtifactDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DockerArtifactDetail{}

// DockerArtifactDetail Docker Artifact Detail
type DockerArtifactDetail struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	DownloadsCount *int64 `json:"downloadsCount,omitempty"`
	ImageName string `json:"imageName"`
	ModifiedAt *string `json:"modifiedAt,omitempty"`
	PackageType PackageType `json:"packageType"`
	PullCommand *string `json:"pullCommand,omitempty"`
	RegistryPath string `json:"registryPath"`
	Size *string `json:"size,omitempty"`
	Url string `json:"url"`
	Version string `json:"version"`
}

type _DockerArtifactDetail DockerArtifactDetail

// NewDockerArtifactDetail instantiates a new DockerArtifactDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerArtifactDetail(imageName string, packageType PackageType, registryPath string, url string, version string) *DockerArtifactDetail {
	this := DockerArtifactDetail{}
	this.ImageName = imageName
	this.PackageType = packageType
	this.RegistryPath = registryPath
	this.Url = url
	this.Version = version
	return &this
}

// NewDockerArtifactDetailWithDefaults instantiates a new DockerArtifactDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerArtifactDetailWithDefaults() *DockerArtifactDetail {
	this := DockerArtifactDetail{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DockerArtifactDetail) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerArtifactDetail) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DockerArtifactDetail) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *DockerArtifactDetail) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDownloadsCount returns the DownloadsCount field value if set, zero value otherwise.
func (o *DockerArtifactDetail) GetDownloadsCount() int64 {
	if o == nil || IsNil(o.DownloadsCount) {
		var ret int64
		return ret
	}
	return *o.DownloadsCount
}

// GetDownloadsCountOk returns a tuple with the DownloadsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerArtifactDetail) GetDownloadsCountOk() (*int64, bool) {
	if o == nil || IsNil(o.DownloadsCount) {
		return nil, false
	}
	return o.DownloadsCount, true
}

// HasDownloadsCount returns a boolean if a field has been set.
func (o *DockerArtifactDetail) HasDownloadsCount() bool {
	if o != nil && !IsNil(o.DownloadsCount) {
		return true
	}

	return false
}

// SetDownloadsCount gets a reference to the given int64 and assigns it to the DownloadsCount field.
func (o *DockerArtifactDetail) SetDownloadsCount(v int64) {
	o.DownloadsCount = &v
}

// GetImageName returns the ImageName field value
func (o *DockerArtifactDetail) GetImageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value
// and a boolean to check if the value has been set.
func (o *DockerArtifactDetail) GetImageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageName, true
}

// SetImageName sets field value
func (o *DockerArtifactDetail) SetImageName(v string) {
	o.ImageName = v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *DockerArtifactDetail) GetModifiedAt() string {
	if o == nil || IsNil(o.ModifiedAt) {
		var ret string
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerArtifactDetail) GetModifiedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *DockerArtifactDetail) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given string and assigns it to the ModifiedAt field.
func (o *DockerArtifactDetail) SetModifiedAt(v string) {
	o.ModifiedAt = &v
}

// GetPackageType returns the PackageType field value
func (o *DockerArtifactDetail) GetPackageType() PackageType {
	if o == nil {
		var ret PackageType
		return ret
	}

	return o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value
// and a boolean to check if the value has been set.
func (o *DockerArtifactDetail) GetPackageTypeOk() (*PackageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageType, true
}

// SetPackageType sets field value
func (o *DockerArtifactDetail) SetPackageType(v PackageType) {
	o.PackageType = v
}

// GetPullCommand returns the PullCommand field value if set, zero value otherwise.
func (o *DockerArtifactDetail) GetPullCommand() string {
	if o == nil || IsNil(o.PullCommand) {
		var ret string
		return ret
	}
	return *o.PullCommand
}

// GetPullCommandOk returns a tuple with the PullCommand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerArtifactDetail) GetPullCommandOk() (*string, bool) {
	if o == nil || IsNil(o.PullCommand) {
		return nil, false
	}
	return o.PullCommand, true
}

// HasPullCommand returns a boolean if a field has been set.
func (o *DockerArtifactDetail) HasPullCommand() bool {
	if o != nil && !IsNil(o.PullCommand) {
		return true
	}

	return false
}

// SetPullCommand gets a reference to the given string and assigns it to the PullCommand field.
func (o *DockerArtifactDetail) SetPullCommand(v string) {
	o.PullCommand = &v
}

// GetRegistryPath returns the RegistryPath field value
func (o *DockerArtifactDetail) GetRegistryPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistryPath
}

// GetRegistryPathOk returns a tuple with the RegistryPath field value
// and a boolean to check if the value has been set.
func (o *DockerArtifactDetail) GetRegistryPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistryPath, true
}

// SetRegistryPath sets field value
func (o *DockerArtifactDetail) SetRegistryPath(v string) {
	o.RegistryPath = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DockerArtifactDetail) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerArtifactDetail) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DockerArtifactDetail) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *DockerArtifactDetail) SetSize(v string) {
	o.Size = &v
}

// GetUrl returns the Url field value
func (o *DockerArtifactDetail) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *DockerArtifactDetail) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *DockerArtifactDetail) SetUrl(v string) {
	o.Url = v
}

// GetVersion returns the Version field value
func (o *DockerArtifactDetail) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DockerArtifactDetail) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DockerArtifactDetail) SetVersion(v string) {
	o.Version = v
}

func (o DockerArtifactDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DockerArtifactDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.DownloadsCount) {
		toSerialize["downloadsCount"] = o.DownloadsCount
	}
	toSerialize["imageName"] = o.ImageName
	if !IsNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	toSerialize["packageType"] = o.PackageType
	if !IsNil(o.PullCommand) {
		toSerialize["pullCommand"] = o.PullCommand
	}
	toSerialize["registryPath"] = o.RegistryPath
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	toSerialize["url"] = o.Url
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *DockerArtifactDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imageName",
		"packageType",
		"registryPath",
		"url",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDockerArtifactDetail := _DockerArtifactDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDockerArtifactDetail)

	if err != nil {
		return err
	}

	*o = DockerArtifactDetail(varDockerArtifactDetail)

	return err
}

type NullableDockerArtifactDetail struct {
	value *DockerArtifactDetail
	isSet bool
}

func (v NullableDockerArtifactDetail) Get() *DockerArtifactDetail {
	return v.value
}

func (v *NullableDockerArtifactDetail) Set(val *DockerArtifactDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerArtifactDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerArtifactDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerArtifactDetail(val *DockerArtifactDetail) *NullableDockerArtifactDetail {
	return &NullableDockerArtifactDetail{value: val, isSet: true}
}

func (v NullableDockerArtifactDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerArtifactDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


