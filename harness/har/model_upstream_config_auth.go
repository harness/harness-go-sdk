/*
Harness Artifact Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package har

import (
	"encoding/json"
	"fmt"
)

// UpstreamConfigAuth - struct for UpstreamConfigAuth
type UpstreamConfigAuth struct {
	AccessKeySecretKey *AccessKeySecretKey
	UserPassword *UserPassword
}

// AccessKeySecretKeyAsUpstreamConfigAuth is a convenience function that returns AccessKeySecretKey wrapped in UpstreamConfigAuth
func AccessKeySecretKeyAsUpstreamConfigAuth(v *AccessKeySecretKey) UpstreamConfigAuth {
	return UpstreamConfigAuth{
		AccessKeySecretKey: v,
	}
}

// UserPasswordAsUpstreamConfigAuth is a convenience function that returns UserPassword wrapped in UpstreamConfigAuth
func UserPasswordAsUpstreamConfigAuth(v *UserPassword) UpstreamConfigAuth {
	return UpstreamConfigAuth{
		UserPassword: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpstreamConfigAuth) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into AccessKeySecretKey
	err = json.Unmarshal(data, &dst.AccessKeySecretKey)
	if err == nil {
		jsonAccessKeySecretKey, _ := json.Marshal(dst.AccessKeySecretKey)
		if string(jsonAccessKeySecretKey) == "{}" { // empty struct
			dst.AccessKeySecretKey = nil
		} else {
			match++
		}
	} else {
		dst.AccessKeySecretKey = nil
	}

	// try to unmarshal data into UserPassword
	err = json.Unmarshal(data, &dst.UserPassword)
	if err == nil {
		jsonUserPassword, _ := json.Marshal(dst.UserPassword)
		if string(jsonUserPassword) == "{}" { // empty struct
			dst.UserPassword = nil
		} else {
			match++
		}
	} else {
		dst.UserPassword = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AccessKeySecretKey = nil
		dst.UserPassword = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpstreamConfigAuth)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpstreamConfigAuth)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpstreamConfigAuth) MarshalJSON() ([]byte, error) {
	if src.AccessKeySecretKey != nil {
		return json.Marshal(&src.AccessKeySecretKey)
	}

	if src.UserPassword != nil {
		return json.Marshal(&src.UserPassword)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpstreamConfigAuth) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AccessKeySecretKey != nil {
		return obj.AccessKeySecretKey
	}

	if obj.UserPassword != nil {
		return obj.UserPassword
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UpstreamConfigAuth) GetActualInstanceValue() (interface{}) {
	if obj.AccessKeySecretKey != nil {
		return *obj.AccessKeySecretKey
	}

	if obj.UserPassword != nil {
		return *obj.UserPassword
	}

	// all schemas are nil
	return nil
}

type NullableUpstreamConfigAuth struct {
	value *UpstreamConfigAuth
	isSet bool
}

func (v NullableUpstreamConfigAuth) Get() *UpstreamConfigAuth {
	return v.value
}

func (v *NullableUpstreamConfigAuth) Set(val *UpstreamConfigAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableUpstreamConfigAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableUpstreamConfigAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpstreamConfigAuth(val *UpstreamConfigAuth) *NullableUpstreamConfigAuth {
	return &NullableUpstreamConfigAuth{value: val, isSet: true}
}

func (v NullableUpstreamConfigAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpstreamConfigAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


