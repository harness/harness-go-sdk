
/*
 * Service Discovery API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package svcdiscovery

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type ApplicationmapApiService service
/*
ApplicationmapApiService auto group applicationmap
Auto group applicationmap based on given rules
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body Create ApplicationMap
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param agentIdentity agent identity
 * @param optional nil or *ApplicationmapApiApplicationMapAutoGroupOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiGetNetworkMapResponse
*/

type ApplicationmapApiApplicationMapAutoGroupOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *ApplicationmapApiService) ApplicationMapAutoGroup(ctx context.Context, body ApiCreateNetworkMapRequest, accountIdentifier string, environmentIdentifier string, agentIdentity string, localVarOptionals *ApplicationmapApiApplicationMapAutoGroupOpts) (ApiGetNetworkMapResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiGetNetworkMapResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/autogroupapplicationmaps"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiGetNetworkMapResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ApplicationmapApiService Create applicationmap
Create applicationmap
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body Create ApplicationMap
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param agentIdentity agent identity
 * @param optional nil or *ApplicationmapApiCreateApplicationMapOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiGetNetworkMapResponse
*/

type ApplicationmapApiCreateApplicationMapOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *ApplicationmapApiService) CreateApplicationMap(ctx context.Context, body ApiCreateNetworkMapRequest, accountIdentifier string, environmentIdentifier string, agentIdentity string, localVarOptionals *ApplicationmapApiCreateApplicationMapOpts) (ApiGetNetworkMapResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiGetNetworkMapResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/applicationmaps"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiGetNetworkMapResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ApplicationmapApiService Delete a applicationmap
Delete a applicationmap
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param networkMapIdentity application map identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param optional nil or *ApplicationmapApiDeleteApplicationMapOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiEmpty
*/

type ApplicationmapApiDeleteApplicationMapOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *ApplicationmapApiService) DeleteApplicationMap(ctx context.Context, agentIdentity string, networkMapIdentity string, accountIdentifier string, environmentIdentifier string, localVarOptionals *ApplicationmapApiDeleteApplicationMapOpts) (ApiEmpty, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiEmpty
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/applicationmaps/{networkMapIdentity}"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"networkMapIdentity"+"}", fmt.Sprintf("%v", networkMapIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiEmpty
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ApplicationmapApiService Get a applicationmap
Get a applicationmap
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param networkMapIdentity ApplicationMap map identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param optional nil or *ApplicationmapApiGetApplicationMapOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiGetNetworkMapResponse
*/

type ApplicationmapApiGetApplicationMapOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *ApplicationmapApiService) GetApplicationMap(ctx context.Context, agentIdentity string, networkMapIdentity string, accountIdentifier string, environmentIdentifier string, localVarOptionals *ApplicationmapApiGetApplicationMapOpts) (ApiGetNetworkMapResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiGetNetworkMapResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/applicationmaps/{networkMapIdentity}"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"networkMapIdentity"+"}", fmt.Sprintf("%v", networkMapIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiGetNetworkMapResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ApplicationmapApiService Get list of applicationmaps
Get list of applicationmaps
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param page page number
 * @param limit limit per page
 * @param all get all
 * @param optional nil or *ApplicationmapApiListApplicationMapOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
     * @param "Search" (optional.String) -  search based on name
@return ApiListNetworkMapResponse
*/

type ApplicationmapApiListApplicationMapOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
    Search optional.String
}

func (a *ApplicationmapApiService) ListApplicationMap(ctx context.Context, agentIdentity string, accountIdentifier string, environmentIdentifier string, page int32, limit int32, all bool, localVarOptionals *ApplicationmapApiListApplicationMapOpts) (ApiListNetworkMapResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListNetworkMapResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/applicationmaps"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("limit", parameterToString(limit, ""))
	if localVarOptionals != nil && localVarOptionals.Search.IsSet() {
		localVarQueryParams.Add("search", parameterToString(localVarOptionals.Search.Value(), ""))
	}
	localVarQueryParams.Add("all", parameterToString(all, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListNetworkMapResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ApplicationmapApiService Get list of custom services for a given netwrk map
Get list of custom services for a given netwrk map
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param networkMapIdentity application map identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param optional nil or *ApplicationmapApiListDiscoveredServiceForApplicationMapOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
     * @param "Search" (optional.String) -  search based on name
@return ApiListDiscoveredService
*/

type ApplicationmapApiListDiscoveredServiceForApplicationMapOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
    Search optional.String
}

func (a *ApplicationmapApiService) ListDiscoveredServiceForApplicationMap(ctx context.Context, agentIdentity string, networkMapIdentity string, accountIdentifier string, environmentIdentifier string, localVarOptionals *ApplicationmapApiListDiscoveredServiceForApplicationMapOpts) (ApiListDiscoveredService, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListDiscoveredService
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/applicationmaps/{networkMapIdentity}/discoveredservices"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"networkMapIdentity"+"}", fmt.Sprintf("%v", networkMapIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Search.IsSet() {
		localVarQueryParams.Add("search", parameterToString(localVarOptionals.Search.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListDiscoveredService
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ApplicationmapApiService Remove stale services from applicationmap
Get a applicationmap
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body Remove stale services
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param agentIdentity agent identity
 * @param networkMapIdentity ApplicationMap map identity
 * @param optional nil or *ApplicationmapApiRemoveStaleServicesFromApplicationMapOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiGetNetworkMapResponse
*/

type ApplicationmapApiRemoveStaleServicesFromApplicationMapOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *ApplicationmapApiService) RemoveStaleServicesFromApplicationMap(ctx context.Context, body ApiEmpty, accountIdentifier string, environmentIdentifier string, agentIdentity string, networkMapIdentity string, localVarOptionals *ApplicationmapApiRemoveStaleServicesFromApplicationMapOpts) (ApiGetNetworkMapResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiGetNetworkMapResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/applicationmaps/{networkMapIdentity}/removestaleservices"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"networkMapIdentity"+"}", fmt.Sprintf("%v", networkMapIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiGetNetworkMapResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ApplicationmapApiService Save applicationmap
Save applicationmap
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body Save NetworkMap
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param agentIdentity agent identity
 * @param optional nil or *ApplicationmapApiSaveApplicationMapOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiGetNetworkMapResponse
*/

type ApplicationmapApiSaveApplicationMapOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *ApplicationmapApiService) SaveApplicationMap(ctx context.Context, body ApiSaveNetworkMapRequest, accountIdentifier string, environmentIdentifier string, agentIdentity string, localVarOptionals *ApplicationmapApiSaveApplicationMapOpts) (ApiGetNetworkMapResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiGetNetworkMapResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/saveapplicationmaps"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiGetNetworkMapResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
ApplicationmapApiService Update a applicationmap
Update a applicationmap
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body Update ApplicationMap
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param agentIdentity agent identity
 * @param networkMapIdentity application map identity
 * @param optional nil or *ApplicationmapApiUpdateApplicationMapOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiGetNetworkMapResponse
*/

type ApplicationmapApiUpdateApplicationMapOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *ApplicationmapApiService) UpdateApplicationMap(ctx context.Context, body ApiUpdateNetworkMapRequest, accountIdentifier string, environmentIdentifier string, agentIdentity string, networkMapIdentity string, localVarOptionals *ApplicationmapApiUpdateApplicationMapOpts) (ApiGetNetworkMapResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiGetNetworkMapResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/applicationmaps/{networkMapIdentity}"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"networkMapIdentity"+"}", fmt.Sprintf("%v", networkMapIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiGetNetworkMapResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
