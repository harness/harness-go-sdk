
/*
 * Service Discovery API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package svcdiscovery

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type K8sresourceApiService service
/*
K8sresourceApiService Get discovered service by id
Get discovered service by id
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param dsvcId discovered service id
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param optional nil or *K8sresourceApiGetDiscoveredServiceOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiGetDiscoveredService
*/

type K8sresourceApiGetDiscoveredServiceOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *K8sresourceApiService) GetDiscoveredService(ctx context.Context, agentIdentity string, dsvcId string, accountIdentifier string, environmentIdentifier string, localVarOptionals *K8sresourceApiGetDiscoveredServiceOpts) (ApiGetDiscoveredService, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiGetDiscoveredService
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/discoveredservices/{dsvc_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dsvc_id"+"}", fmt.Sprintf("%v", dsvcId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiGetDiscoveredService
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService Get pod linked to discovered service for a given workload
Get pod linked to discovered service for a given workload
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param dsvcId discovered service id
 * @param wlUid uid of workload
 * @param podUid uid of pod
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param optional nil or *K8sresourceApiGetPodForDiscoveredServiceOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiGetPodResponse
*/

type K8sresourceApiGetPodForDiscoveredServiceOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *K8sresourceApiService) GetPodForDiscoveredService(ctx context.Context, agentIdentity string, dsvcId string, wlUid string, podUid string, accountIdentifier string, environmentIdentifier string, localVarOptionals *K8sresourceApiGetPodForDiscoveredServiceOpts) (ApiGetPodResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiGetPodResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/discoveredservices/{dsvc_id}/workloads/{wl_uid}/pods/{pod_uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dsvc_id"+"}", fmt.Sprintf("%v", dsvcId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wl_uid"+"}", fmt.Sprintf("%v", wlUid), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pod_uid"+"}", fmt.Sprintf("%v", podUid), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiGetPodResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService Get service linked to discovered service
Get service linked to discovered service
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param dsvcId discovered service id
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param optional nil or *K8sresourceApiGetServiceForDiscoveredServiceOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiGetServiceResponse
*/

type K8sresourceApiGetServiceForDiscoveredServiceOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *K8sresourceApiService) GetServiceForDiscoveredService(ctx context.Context, agentIdentity string, dsvcId string, accountIdentifier string, environmentIdentifier string, localVarOptionals *K8sresourceApiGetServiceForDiscoveredServiceOpts) (ApiGetServiceResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiGetServiceResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/discoveredservices/{dsvc_id}/service"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dsvc_id"+"}", fmt.Sprintf("%v", dsvcId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiGetServiceResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService List connection
List connection
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param optional nil or *K8sresourceApiListConnectionOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiListConnection
*/

type K8sresourceApiListConnectionOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *K8sresourceApiService) ListConnection(ctx context.Context, agentIdentity string, accountIdentifier string, environmentIdentifier string, localVarOptionals *K8sresourceApiListConnectionOpts) (ApiListConnection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListConnection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/connections"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListConnection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService List connection of a pod linked to discovered service for a given workload
List connection of a pod linked to discovered service for a given workload
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param podUid uid of pod
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param optional nil or *K8sresourceApiListConnectionOfAPodOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiListConnection
*/

type K8sresourceApiListConnectionOfAPodOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *K8sresourceApiService) ListConnectionOfAPod(ctx context.Context, agentIdentity string, podUid string, accountIdentifier string, environmentIdentifier string, localVarOptionals *K8sresourceApiListConnectionOfAPodOpts) (ApiListConnection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListConnection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/pods/{pod_uid}/connections"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pod_uid"+"}", fmt.Sprintf("%v", podUid), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListConnection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService List cantainer of a pod linked to discovered service for a given workload
List cantainer of a pod linked to discovered service for a given workload
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param podUid uid of pod
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param optional nil or *K8sresourceApiListContainerOfAPodOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiListContainer
*/

type K8sresourceApiListContainerOfAPodOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *K8sresourceApiService) ListContainerOfAPod(ctx context.Context, agentIdentity string, podUid string, accountIdentifier string, environmentIdentifier string, localVarOptionals *K8sresourceApiListContainerOfAPodOpts) (ApiListContainer, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListContainer
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/pods/{pod_uid}/containers"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pod_uid"+"}", fmt.Sprintf("%v", podUid), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListContainer
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService Get list of cronjobs
Get list of cronjobs present in the kubernetes agent, name and namespace can be passed as filter in query param
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param page page number
 * @param limit limit per page
 * @param all get all
 * @param optional nil or *K8sresourceApiListCronjobOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
     * @param "Name" (optional.String) -  name of the cronjob
     * @param "Namespace" (optional.String) -  namespace of the cronjob
@return ApiListCronJobResponse
*/

type K8sresourceApiListCronjobOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
    Name optional.String
    Namespace optional.String
}

func (a *K8sresourceApiService) ListCronjob(ctx context.Context, agentIdentity string, accountIdentifier string, environmentIdentifier string, page int32, limit int32, all bool, localVarOptionals *K8sresourceApiListCronjobOpts) (ApiListCronJobResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListCronJobResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/cronjobs"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Namespace.IsSet() {
		localVarQueryParams.Add("namespace", parameterToString(localVarOptionals.Namespace.Value(), ""))
	}
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("limit", parameterToString(limit, ""))
	localVarQueryParams.Add("all", parameterToString(all, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListCronJobResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService Get list of daemonsets
Get list of daemonsets present in the kubernetes agent, name and namespace can be passed as filter in query param
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param page page number
 * @param limit limit per page
 * @param all get all
 * @param optional nil or *K8sresourceApiListDeamonsetOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
     * @param "Name" (optional.String) -  name of the daemonset
     * @param "Namespace" (optional.String) -  namespace of the daemonset
@return ApiListDaemonSetResponse
*/

type K8sresourceApiListDeamonsetOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
    Name optional.String
    Namespace optional.String
}

func (a *K8sresourceApiService) ListDeamonset(ctx context.Context, agentIdentity string, accountIdentifier string, environmentIdentifier string, page int32, limit int32, all bool, localVarOptionals *K8sresourceApiListDeamonsetOpts) (ApiListDaemonSetResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListDaemonSetResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/daemonsets"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Namespace.IsSet() {
		localVarQueryParams.Add("namespace", parameterToString(localVarOptionals.Namespace.Value(), ""))
	}
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("limit", parameterToString(limit, ""))
	localVarQueryParams.Add("all", parameterToString(all, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListDaemonSetResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService Get list of deployments
Get list of deployments present in the kubernetes agent, name and namespace can be passed as filter in query param
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param page page number
 * @param limit limit per page
 * @param all get all
 * @param optional nil or *K8sresourceApiListDeploymentOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
     * @param "Name" (optional.String) -  name of the deployment
     * @param "Namespace" (optional.String) -  namespace of the deployment
@return ApiListDeploymentResponse
*/

type K8sresourceApiListDeploymentOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
    Name optional.String
    Namespace optional.String
}

func (a *K8sresourceApiService) ListDeployment(ctx context.Context, agentIdentity string, accountIdentifier string, environmentIdentifier string, page int32, limit int32, all bool, localVarOptionals *K8sresourceApiListDeploymentOpts) (ApiListDeploymentResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListDeploymentResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/deployments"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Namespace.IsSet() {
		localVarQueryParams.Add("namespace", parameterToString(localVarOptionals.Namespace.Value(), ""))
	}
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("limit", parameterToString(limit, ""))
	localVarQueryParams.Add("all", parameterToString(all, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListDeploymentResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService Get list of discovered services
Get list of discovered services
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param page page number
 * @param limit limit per page
 * @param all get all
 * @param optional nil or *K8sresourceApiListDiscoveredServiceOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
     * @param "Namespace" (optional.String) -  namespace of the discovered service
     * @param "Search" (optional.String) -  search based on name
@return ApiListDiscoveredService
*/

type K8sresourceApiListDiscoveredServiceOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
    Namespace optional.String
    Search optional.String
}

func (a *K8sresourceApiService) ListDiscoveredService(ctx context.Context, agentIdentity string, accountIdentifier string, environmentIdentifier string, page int32, limit int32, all bool, localVarOptionals *K8sresourceApiListDiscoveredServiceOpts) (ApiListDiscoveredService, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListDiscoveredService
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/discoveredservices"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Namespace.IsSet() {
		localVarQueryParams.Add("namespace", parameterToString(localVarOptionals.Namespace.Value(), ""))
	}
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("limit", parameterToString(limit, ""))
	if localVarOptionals != nil && localVarOptionals.Search.IsSet() {
		localVarQueryParams.Add("search", parameterToString(localVarOptionals.Search.Value(), ""))
	}
	localVarQueryParams.Add("all", parameterToString(all, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListDiscoveredService
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService List DiscoveredService Connection
List connections in the context of DiscoveredService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param optional nil or *K8sresourceApiListDiscoveredServiceConnectionOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiListDiscoveredServiceConnection
*/

type K8sresourceApiListDiscoveredServiceConnectionOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *K8sresourceApiService) ListDiscoveredServiceConnection(ctx context.Context, agentIdentity string, accountIdentifier string, environmentIdentifier string, localVarOptionals *K8sresourceApiListDiscoveredServiceConnectionOpts) (ApiListDiscoveredServiceConnection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListDiscoveredServiceConnection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/discoveredserviceconnections"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListDiscoveredServiceConnection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService Get list of jobs
Get list of jobs present in the kubernetes agent, name and namespace can be passed as filter in query param
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param page page number
 * @param limit limit per page
 * @param all get all
 * @param optional nil or *K8sresourceApiListJobOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
     * @param "Name" (optional.String) -  name of the job
     * @param "Namespace" (optional.String) -  namespace of the job
@return ApiListJobResponse
*/

type K8sresourceApiListJobOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
    Name optional.String
    Namespace optional.String
}

func (a *K8sresourceApiService) ListJob(ctx context.Context, agentIdentity string, accountIdentifier string, environmentIdentifier string, page int32, limit int32, all bool, localVarOptionals *K8sresourceApiListJobOpts) (ApiListJobResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListJobResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/jobs"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Namespace.IsSet() {
		localVarQueryParams.Add("namespace", parameterToString(localVarOptionals.Namespace.Value(), ""))
	}
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("limit", parameterToString(limit, ""))
	localVarQueryParams.Add("all", parameterToString(all, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListJobResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService Get list of namespaces
Get list of namespaces present in the kubernetes agent, name can be passed as filter in query param
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param agentIdentity agent identity
 * @param page page number
 * @param limit limit per page
 * @param all get all
 * @param optional nil or *K8sresourceApiListNamespaceOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
     * @param "Name" (optional.String) -  name of the namespace
@return ApiListNamespaceResponse
*/

type K8sresourceApiListNamespaceOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
    Name optional.String
}

func (a *K8sresourceApiService) ListNamespace(ctx context.Context, accountIdentifier string, environmentIdentifier string, agentIdentity string, page int32, limit int32, all bool, localVarOptionals *K8sresourceApiListNamespaceOpts) (ApiListNamespaceResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListNamespaceResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/namespaces"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("limit", parameterToString(limit, ""))
	localVarQueryParams.Add("all", parameterToString(all, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListNamespaceResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService Get list of nodes
Get list of nodes present in the kubernetes agent, name can be passed as filter in query param
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param page page number
 * @param limit limit per page
 * @param all get all
 * @param optional nil or *K8sresourceApiListNodeOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
     * @param "Name" (optional.String) -  name of the node
@return ApiListNodeResponse
*/

type K8sresourceApiListNodeOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
    Name optional.String
}

func (a *K8sresourceApiService) ListNode(ctx context.Context, agentIdentity string, accountIdentifier string, environmentIdentifier string, page int32, limit int32, all bool, localVarOptionals *K8sresourceApiListNodeOpts) (ApiListNodeResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListNodeResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/nodes"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("limit", parameterToString(limit, ""))
	localVarQueryParams.Add("all", parameterToString(all, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListNodeResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService List pvc of a pod linked to discovered service for a given workload
List pvc of a pod linked to discovered service for a given workload
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param podUid uid of pod
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param optional nil or *K8sresourceApiListPVCOfAPodOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiListContainerVolume
*/

type K8sresourceApiListPVCOfAPodOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *K8sresourceApiService) ListPVCOfAPod(ctx context.Context, agentIdentity string, podUid string, accountIdentifier string, environmentIdentifier string, localVarOptionals *K8sresourceApiListPVCOfAPodOpts) (ApiListContainerVolume, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListContainerVolume
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/pods/{pod_uid}/volumes"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pod_uid"+"}", fmt.Sprintf("%v", podUid), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListContainerVolume
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService Get list of pods
Get list of pods present in the kubernetes agent, name and namespace can be passed as filter in query param
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param page page number
 * @param limit limit per page
 * @param all get all
 * @param optional nil or *K8sresourceApiListPodOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
     * @param "Name" (optional.String) -  name of the pod
     * @param "Namespace" (optional.String) -  namespace of the pod
@return ApiListPodResponse
*/

type K8sresourceApiListPodOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
    Name optional.String
    Namespace optional.String
}

func (a *K8sresourceApiService) ListPod(ctx context.Context, agentIdentity string, accountIdentifier string, environmentIdentifier string, page int32, limit int32, all bool, localVarOptionals *K8sresourceApiListPodOpts) (ApiListPodResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListPodResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/pods"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Namespace.IsSet() {
		localVarQueryParams.Add("namespace", parameterToString(localVarOptionals.Namespace.Value(), ""))
	}
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("limit", parameterToString(limit, ""))
	localVarQueryParams.Add("all", parameterToString(all, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListPodResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService List pods linked to discovered service for a given workload
List pods linked to discovered service for a given workload
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param dsvcId discovered service id
 * @param wlUid uid of workload
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param optional nil or *K8sresourceApiListPodForDiscoveredServiceOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
@return ApiListPodResponse
*/

type K8sresourceApiListPodForDiscoveredServiceOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
}

func (a *K8sresourceApiService) ListPodForDiscoveredService(ctx context.Context, agentIdentity string, dsvcId string, wlUid string, accountIdentifier string, environmentIdentifier string, localVarOptionals *K8sresourceApiListPodForDiscoveredServiceOpts) (ApiListPodResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListPodResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/discoveredservices/{dsvc_id}/workloads/{wl_uid}/pods"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dsvc_id"+"}", fmt.Sprintf("%v", dsvcId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wl_uid"+"}", fmt.Sprintf("%v", wlUid), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListPodResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService Get list of replicasets
Get list of replicasets present in the kubernetes agent, name and namespace can be passed as filter in query param
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param page page number
 * @param limit limit per page
 * @param all get all
 * @param optional nil or *K8sresourceApiListReplicaSetOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
     * @param "Name" (optional.String) -  name of the replicaset
     * @param "Namespace" (optional.String) -  namespace of the replicaset
@return ApiListReplicaSetResponse
*/

type K8sresourceApiListReplicaSetOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
    Name optional.String
    Namespace optional.String
}

func (a *K8sresourceApiService) ListReplicaSet(ctx context.Context, agentIdentity string, accountIdentifier string, environmentIdentifier string, page int32, limit int32, all bool, localVarOptionals *K8sresourceApiListReplicaSetOpts) (ApiListReplicaSetResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListReplicaSetResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/replicasets"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Namespace.IsSet() {
		localVarQueryParams.Add("namespace", parameterToString(localVarOptionals.Namespace.Value(), ""))
	}
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("limit", parameterToString(limit, ""))
	localVarQueryParams.Add("all", parameterToString(all, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListReplicaSetResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService Get list of replicationcontrollers
Get list of replicationcontrollers present in the kubernetes agent, name and namespace can be passed as filter in query param
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param page page number
 * @param limit limit per page
 * @param all get all
 * @param optional nil or *K8sresourceApiListReplicationControllerOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
     * @param "Name" (optional.String) -  name of the replicationcontroller
     * @param "Namespace" (optional.String) -  namespace of the replicationcontroller
@return ApiListReplicationControllerResponse
*/

type K8sresourceApiListReplicationControllerOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
    Name optional.String
    Namespace optional.String
}

func (a *K8sresourceApiService) ListReplicationController(ctx context.Context, agentIdentity string, accountIdentifier string, environmentIdentifier string, page int32, limit int32, all bool, localVarOptionals *K8sresourceApiListReplicationControllerOpts) (ApiListReplicationControllerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListReplicationControllerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/replicationcontrollers"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Namespace.IsSet() {
		localVarQueryParams.Add("namespace", parameterToString(localVarOptionals.Namespace.Value(), ""))
	}
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("limit", parameterToString(limit, ""))
	localVarQueryParams.Add("all", parameterToString(all, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListReplicationControllerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService Get list of servces
Get list of services present in the kubernetes agent, name and namespace can be passed as filter in query param
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param page page number
 * @param limit limit per page
 * @param all get all
 * @param optional nil or *K8sresourceApiListServiceOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
     * @param "Name" (optional.String) -  name of the service
     * @param "Namespace" (optional.String) -  namespace of the service
@return ApiListServiceResponse
*/

type K8sresourceApiListServiceOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
    Name optional.String
    Namespace optional.String
}

func (a *K8sresourceApiService) ListService(ctx context.Context, agentIdentity string, accountIdentifier string, environmentIdentifier string, page int32, limit int32, all bool, localVarOptionals *K8sresourceApiListServiceOpts) (ApiListServiceResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListServiceResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/agents/{agentIdentity}/services"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Namespace.IsSet() {
		localVarQueryParams.Add("namespace", parameterToString(localVarOptionals.Namespace.Value(), ""))
	}
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("limit", parameterToString(limit, ""))
	localVarQueryParams.Add("all", parameterToString(all, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListServiceResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
K8sresourceApiService Get list of statefulsets
Get list of statefulsets present in the kubernetes agent, name and namespace can be passed as filter in query param
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agentIdentity agent identity
 * @param accountIdentifier account id that want to access the resource
 * @param environmentIdentifier environment id is the environment where you want to access the resource
 * @param page page number
 * @param limit limit per page
 * @param all get all
 * @param optional nil or *K8sresourceApiListStatefulSetOpts - Optional Parameters:
     * @param "CorrelationID" (optional.String) -  correlation id is used to debug micro svc communication
     * @param "OrganizationIdentifier" (optional.String) -  organization id that want to access the resource
     * @param "ProjectIdentifier" (optional.String) -  project id that want to access the resource
     * @param "Name" (optional.String) -  name of the statefulset
     * @param "Namespace" (optional.String) -  namespace of the statefulset
@return ApiListStatefulSetResponse
*/

type K8sresourceApiListStatefulSetOpts struct {
    CorrelationID optional.String
    OrganizationIdentifier optional.String
    ProjectIdentifier optional.String
    Name optional.String
    Namespace optional.String
}

func (a *K8sresourceApiService) ListStatefulSet(ctx context.Context, agentIdentity string, accountIdentifier string, environmentIdentifier string, page int32, limit int32, all bool, localVarOptionals *K8sresourceApiListStatefulSetOpts) (ApiListStatefulSetResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ApiListStatefulSetResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/nfras/{agentIdentity}/statefulsets"
	localVarPath = strings.Replace(localVarPath, "{"+"agentIdentity"+"}", fmt.Sprintf("%v", agentIdentity), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CorrelationID.IsSet() {
		localVarQueryParams.Add("correlationID", parameterToString(localVarOptionals.CorrelationID.Value(), ""))
	}
	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrganizationIdentifier.IsSet() {
		localVarQueryParams.Add("organizationIdentifier", parameterToString(localVarOptionals.OrganizationIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	localVarQueryParams.Add("environmentIdentifier", parameterToString(environmentIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Namespace.IsSet() {
		localVarQueryParams.Add("namespace", parameterToString(localVarOptionals.Namespace.Value(), ""))
	}
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("limit", parameterToString(limit, ""))
	localVarQueryParams.Add("all", parameterToString(all, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-API-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ApiListStatefulSetResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
